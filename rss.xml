<?xml version="1.0" encoding="UTF-8"?><rss xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title><![CDATA[Krushi Raj Tula - RSS Feed]]></title><description><![CDATA[Portfolio of Krushi Raj Tula. A developer, geek, enthusiast, who loves to solve problems and fix things with technology. You can read my writings here.]]></description><link>https://krushiraj.github.io</link><generator>GatsbyJS</generator><lastBuildDate>Thu, 23 Nov 2023 17:56:05 GMT</lastBuildDate><item><title><![CDATA[Mastering ERC721 Enumerable]]></title><description><![CDATA[The ERC721 Enumerable ERC721 Enumerable Intro We are well known for the fact that  ERC721  is the standard for the NFTs, which are used to…]]></description><link>https://krushiraj.github.io/writings/erc-721-enumerable/</link><guid isPermaLink="true">https://krushiraj.github.io/writings/erc-721-enumerable/</guid><pubDate>Sat, 23 Dec 2023 00:00:00 GMT</pubDate><content:encoded>&lt;h1&gt;The ERC721 Enumerable&lt;/h1&gt;&lt;h2&gt;ERC721 Enumerable Intro&lt;/h2&gt;&lt;p&gt;We are well known for the fact that &lt;strong&gt;ERC721&lt;/strong&gt; is the standard for the NFTs, which are used to represent the unique digital assets on the Ethereum Blockchain. In addition to that &lt;strong&gt;ERC721 Enumerable&lt;/strong&gt; is an extension of ERC721 that enhances its capabilities by enabling efficient enumeration of NFTs for advanced tracking, management and optimal for the operations on the blockchain.&lt;/p&gt;&lt;p&gt;ERC721 Enumerable is designed to track and enumerate tokens more effectively. It’s particularly useful for applications requiring knowledge of all tokens owned by an address or the total supply of tokens.&lt;/p&gt;&lt;h2&gt;Using ERC721 Enumerable to create an NFT smart contract&lt;/h2&gt;&lt;p&gt;It is similar to the creation of an NFT smart contract using ERC721 but with some additional functions that we need to override so we can enjoy the benefits of ERC721 Enumerable.&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;You can learn how to implement and use ERC721 here&lt;/p&gt;&lt;/blockquote&gt;&lt;ol&gt;&lt;li&gt;&lt;strong&gt;Starting with Basic Setup:&lt;/strong&gt;
Import OpenZeppelin’s ERC721 and ERC721Enumerable contracts.
Declare the contract and inherit from both ERC721 and ERC721Enumerable.&lt;/li&gt;&lt;/ol&gt;&lt;pre&gt;&lt;code class=&quot;language-solidity&quot;&gt;// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

import &amp;quot;@openzeppelin/contracts/token/ERC721/ERC721.sol&amp;quot;;
import &amp;quot;@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol&amp;quot;;

contract MyNFT is ERC721, ERC721Enumerable {
    // Your contract code goes here
}
&lt;/code&gt;&lt;/pre&gt;&lt;ol start=&quot;2&quot;&gt;&lt;li&gt;&lt;strong&gt;Override Required Functions.&lt;/strong&gt;
Override functions from both ERC721 and ERC721Enumerable to ensure compatibility.&lt;/li&gt;&lt;/ol&gt;&lt;pre&gt;&lt;code class=&quot;language-solidity&quot;&gt;function _beforeTokenTransfer(address from, address to, uint256 tokenId)
    internal
    override(ERC721, ERC721Enumerable)
{
    super._beforeTokenTransfer(from, to, tokenId);
}

function supportsInterface(bytes4 interfaceId)
    public
    view
    override(ERC721, ERC721Enumerable)
    returns (bool)
{
    return super.supportsInterface(interfaceId);
}
&lt;/code&gt;&lt;/pre&gt;&lt;ol start=&quot;3&quot;&gt;&lt;li&gt;&lt;strong&gt;Implement Minting Function.&lt;/strong&gt;
Create a function to mint new NFTs.&lt;/li&gt;&lt;/ol&gt;&lt;pre&gt;&lt;code class=&quot;language-solidity&quot;&gt;function mint(address to, uint256 tokenId) public {
    _safeMint(to, tokenId);
    // Additional logic can be added here
}
&lt;/code&gt;&lt;/pre&gt;&lt;ol start=&quot;4&quot;&gt;&lt;li&gt;&lt;strong&gt;Accessing Enumerable Features&lt;/strong&gt; (refer &lt;a href=&quot;https://docs.openzeppelin.com/contracts/4.x/api/token/erc721#ERC721Enumerable&quot;&gt;Open Zeppelin Docs&lt;/a&gt; to know more).&lt;/li&gt;&lt;/ol&gt;&lt;ul&gt;&lt;li&gt;Use totalSupply() to get the total number of tokens minted.&lt;/li&gt;&lt;li&gt;tokenByIndex(uint256 index) to access a token by its global index.&lt;/li&gt;&lt;li&gt;tokenOfOwnerByIndex(address owner, uint256 index) to find a user’s token by index.&lt;/li&gt;&lt;/ul&gt;&lt;pre&gt;&lt;code class=&quot;language-solidity&quot;&gt;function getTokenByIndex(uint256 index) public view returns (uint256) {
    return tokenByIndex(index);
}

function getTokenOfOwnerByIndex(address owner, uint256 index) public view returns (uint256) {
    return tokenOfOwnerByIndex(owner, index);
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;This basic structure covers the essentials of using ERC721 Enumerable in a smart contract. With this, you can easily get the totalSupply of an NFT collection, fetch any token by its index or fetch tokens held by an owner.&lt;/p&gt;&lt;h2&gt;Understanding the Underlying Mechanics&lt;/h2&gt;&lt;p&gt;We have discussed a bit about the uses of ERC721 Enumerable and how we can use it to create an NFT contract. Now, let us dive deep into it and see how and why it is useful, in what ways and how is it better than other approaches which can give the same result to get totalSupply, fetching tokens by index or owner.&lt;/p&gt;&lt;p&gt;To answer the simple question of ”&lt;strong&gt;why?&lt;/strong&gt;” with a simple answer: &lt;/p&gt;&lt;u&gt;ERC721 Enumerable is designed for efficiency and reduced gas costs, crucial in Ethereum transactions.&lt;/u&gt;&lt;p&gt;We know that you are curious to know the detailed explanation too. Here it is.&lt;/p&gt;&lt;h3&gt;Usage of additional data structures and storage&lt;/h3&gt;&lt;p&gt;We refer to &lt;a href=&quot;https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/token/ERC721/ERC721.sol&quot;&gt;ERC721&lt;/a&gt; and &lt;a href=&quot;https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/token/ERC721/extensions/ERC721Enumerable.sol&quot;&gt;ERC721 Enumerable&lt;/a&gt; by Open Zeppelin for this.&lt;/p&gt;&lt;h4&gt;ERC721&lt;/h4&gt;&lt;pre&gt;&lt;code class=&quot;language-solidity&quot;&gt;abstract contract ERC721 is Context, ERC165, IERC721, IERC721Metadata, IERC721Errors {
    using Strings for uint256;

    // Token name
    string private _name;

    // Token symbol
    string private _symbol;

    mapping(uint256 tokenId =&amp;gt; address) private _owners;

    mapping(address owner =&amp;gt; uint256) private _balances;
&lt;/code&gt;&lt;/pre&gt;&lt;h4&gt;ERC721 Enumerable&lt;/h4&gt;&lt;pre&gt;&lt;code class=&quot;language-solidity&quot;&gt;abstract contract ERC721Enumerable is ERC721, IERC721Enumerable {
    mapping(address owner =&amp;gt; mapping(uint256 index =&amp;gt; uint256)) private _ownedTokens;
    mapping(uint256 tokenId =&amp;gt; uint256) private _ownedTokensIndex;

    uint256[] private _allTokens;
    mapping(uint256 tokenId =&amp;gt; uint256) private _allTokensIndex;
&lt;/code&gt;&lt;/pre&gt;&lt;h4&gt;Going into the details&lt;/h4&gt;&lt;p&gt;If you observe here, the Enumerable version has 4 extra storage variables i.e., &lt;code&gt;_ownedTokens&lt;/code&gt;, &lt;code&gt;_ownedTokensIndex&lt;/code&gt;, &lt;code&gt;_allTokens&lt;/code&gt; and &lt;code&gt;_allTokensIndex&lt;/code&gt;&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;code&gt;_ownedTokens&lt;/code&gt;: Maps an owner’s address to their owned token IDs.
Example: If Alice (address &lt;code&gt;0x1234...alice&lt;/code&gt;) owns tokens 1, 2, and 5, &lt;code&gt;_ownedTokens[0x1234...alice]&lt;/code&gt; could return [1, 2, 5].&lt;/li&gt;&lt;li&gt;&lt;code&gt;_ownedTokensIndex&lt;/code&gt;: Maps a token ID to its index in the owner’s tokens list.
Example: If Alice’s 3rd token ID is 5, &lt;code&gt;_ownedTokensIndex[5]&lt;/code&gt; returns 2 (the index of token 5 in Alice’s list in the example above).&lt;/li&gt;&lt;li&gt;&lt;code&gt;_allTokens&lt;/code&gt;: An array of all token IDs in the contract.
Example: If there are three minted tokens with IDs 1, 2, and 5, &lt;code&gt;_allTokens&lt;/code&gt; could be [1, 2, 5].&lt;/li&gt;&lt;li&gt;&lt;code&gt;_allTokensIndex&lt;/code&gt;: Maps each token ID to its index in &lt;code&gt;_allTokens&lt;/code&gt;.
Example: Token ID 2 is the second token in &lt;code&gt;_allTokens&lt;/code&gt; (from the example above), &lt;code&gt;_allTokensIndex[2]&lt;/code&gt; returns 1.&lt;/li&gt;&lt;/ul&gt;&lt;h3&gt;What makes the Enumerable different&lt;/h3&gt;&lt;p&gt;These 4 storage variables are the reason why ERC721 Enumerable is gas-efficient, optimal for tracking and management of tokens owned by addresses.&lt;/p&gt;&lt;p&gt;For example, &lt;/p&gt;&lt;ul&gt;&lt;li&gt;To get the total supply, you just have to return the length of &lt;code&gt;_allTokens&lt;/code&gt;.&lt;/li&gt;&lt;li&gt;To retrieve the token data by an index we can simply use &lt;code&gt;_allTokens[index]&lt;/code&gt;.&lt;/li&gt;&lt;li&gt;To get a single token owned by an owner we can simply use &lt;code&gt;_ownedTokens[owner][index]&lt;/code&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h3&gt;How are storage variables useful and how do they affect?&lt;/h3&gt;&lt;p&gt;Imagine you want to know the number of tokens that have been minted so far in ERC721. We have to go through all key-value pairs in the &lt;code&gt;_owners&lt;/code&gt; mapping or calculate the sum of all values in &lt;code&gt;_balances&lt;/code&gt; mapping.&lt;/p&gt;&lt;p&gt;But, the catch here is we cannot simply iterate over them, we must get all the keys or values (&lt;em&gt;for which you have to maintain another storage variable, as Solidity doesn’t have an implementation to get all keys/values from a mapping&lt;/em&gt;) and do the necessary sum operations to get the total supply which is very high in gas cost. So in short this is &lt;u&gt;quite inefficient&lt;/u&gt;.&lt;/p&gt;&lt;p&gt;On the other side having an extra storage variable which alters the state of the blockchain would cost you some gas on writes and reads but at least they are far lesser when compared to the earlier approach.&lt;/p&gt;&lt;h3&gt;Alternative Storage Considerations&lt;/h3&gt;&lt;h4&gt;Storing an Array of Tokens Per Address:&lt;/h4&gt;&lt;pre&gt;&lt;code class=&quot;language-solidity&quot;&gt;mapping (address owner =&amp;gt; uint[]) private ownerTokens;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;This approach would significantly increase gas costs due to high storage requirements and reads/writes on array change with the number of elements in an array.&lt;/p&gt;&lt;p&gt;As the number of tokens owned by the owner increases it will increase the gas cost.&lt;/p&gt;&lt;p&gt;Also when setting the token IDs in an array, we must either define a fixed-length array or use a dynamic-length array. This again has a problem for each approach.&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;strong&gt;fixed-length&lt;/strong&gt; - you have to specify the number of max tokens held by an address and it will take up storage space to store max number of token IDs in the array even if the address only owns 1 token. Waste of storage. Also, you must decide on the number of max tokens an address could hold or choose a high number so that we never reach the overflow point. &lt;em&gt;Which by the way is not a good idea&lt;/em&gt;.&lt;/li&gt;&lt;li&gt;&lt;strong&gt;dynamic-length&lt;/strong&gt; - you have to always adjust the size of the array and add/remove token IDs which is not gas efficient when compared to mapping read/write operations&lt;/li&gt;&lt;/ul&gt;&lt;h4&gt;Returning a List of Owned Tokens:&lt;/h4&gt;&lt;p&gt;Directly returning a list is not gas-efficient.&lt;/p&gt;&lt;p&gt;It again needs an extra storage variable to support us to iterate over all the tokens held by an address.&lt;/p&gt;&lt;p&gt;Consider an example where the dApp wants to show details of a single NFT owned by an address, they might have to get a list of all tokens and iterate over them in frontend to pick one token and display its data. Here we are sending data that is unnecessary, also this affects gas costs drastically as the number of tokens owned increases for an address. Because it would take more memory and more unnecessary processing power on the node.&lt;/p&gt;&lt;h3&gt;Compare and Contrast&lt;/h3&gt;&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;ERC721 Enumerable Approach&lt;/th&gt;&lt;th&gt;Other Approaches&lt;/th&gt;&lt;/tr&gt;&lt;/thead&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td&gt;Use of multiple extra mapping storage.&lt;/td&gt;&lt;td&gt;Use of single extra array storage.&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;Reads/writes have almost constant gas costs.&lt;/td&gt;&lt;td&gt;Gas cost increases with the array sizes.&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;Has granularity to get data for a single token with constant gas cost.&lt;/td&gt;&lt;td&gt;Have to iterate and pick the token, which varies the gas cost.&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;Easy for tracking.&lt;/td&gt;&lt;td&gt;Need extra processing and would need more storage variables to do so.&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;Not easy to iterate over all tokens of the owner by using single storage.&lt;/td&gt;&lt;td&gt;Can easily iterate over tokens owned by an address.&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;h3&gt;Should we go for readability over efficiency?&lt;/h3&gt;&lt;p&gt;It completely depends on the particular use of the contract, how the reads and writes are done, what is the frequency of each operation, the purpose of the NFT contract and various other things.&lt;/p&gt;&lt;p&gt;But when we look at the ease of implementation, efficiency and usability, ERC721 Enumerable has figured out most of them and solves most of the issues. Unless the project has &lt;em&gt;some specific and sophisticated requirements which get benefit from the use of arrays&lt;/em&gt; for the storage of tokens for an address, &lt;u&gt;ERC721ERC721 Enumerable should do the job in most cases&lt;/u&gt;.&lt;/p&gt;&lt;h3&gt;Projects Utilizing ERC721 Enumerable&lt;/h3&gt;&lt;p&gt;Many NFT projects leverage ERC721 Enumerable to manage large collections efficiently, ensuring users can quickly access ownership data.&lt;/p&gt;&lt;p&gt;Some popular NFT project examples are:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;a href=&quot;https://etherscan.io/token/0xbc4ca0eda7647a8ab7c2061c2e118a18a936f13d#code&quot;&gt;Bored Ape Yacht Club&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://etherscan.io/token/0xed5af388653567af2f388e6224dc7c4b3241c544&quot;&gt;Azuki&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://etherscan.io/token/0xb119ec7ee48928a94789ed0842309faf34f0c790#code&quot;&gt;Lawless&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;blockquote&gt;&lt;p&gt;You can go through the verified code of the above contracts to see how they made use of ERC721Enumerable&lt;/p&gt;&lt;/blockquote&gt;&lt;h2&gt;Problems Solved&lt;/h2&gt;&lt;p&gt;ERC721 Enumerable addresses the challenge of efficiently tracking and enumerating NFTs in a collection, particularly vital for projects with extensive NFT assets.&lt;/p&gt;&lt;h2&gt;Potential Issues and Considerations&lt;/h2&gt;&lt;p&gt;The ERC721 Enumerable extension, while useful, introduces some potential security concerns and issues:&lt;/p&gt;&lt;ol&gt;&lt;li&gt;&lt;strong&gt;Gas Costs&lt;/strong&gt;: Functions that iterate over large data sets can incur significant gas costs, potentially making the contract expensive to interact with.&lt;/li&gt;&lt;li&gt;&lt;strong&gt;Denial of Service (DoS) Vulnerabilities&lt;/strong&gt;: Malicious actors could exploit high gas costs in enumeration functions to cause DoS attacks, especially in functions like tokenOfOwnerByIndex when called with a high index value.&lt;/li&gt;&lt;li&gt;&lt;strong&gt;Complexity and Bugs&lt;/strong&gt;: Additional complexity introduced by enumerable functionality can lead to bugs, making the contract more vulnerable to exploits.&lt;/li&gt;&lt;li&gt;&lt;strong&gt;Front-Running Attacks&lt;/strong&gt;: Enumeration could expose data that might be susceptible to front-running attacks, where a malicious user observes a transaction and tries to get their own transaction mined first.&lt;/li&gt;&lt;li&gt;&lt;strong&gt;Scalability Issues&lt;/strong&gt;: As the NFT collection grows, the cost and time of enumeration might increase, which could lead to performance issues.&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;&lt;strong&gt;Example&lt;/strong&gt;: Imagine someone holds a large number of tokens in a collection and getting all of them in a single go would cost more gas [1]. Sometimes it may cross the block limit [2]. This makes the whole project sesceptible for more failure of transactions for a use case with large dataset, causing the issues in scaling the project [5]. This can be considered as a drawback due to the openness and transperency provided by the blockchain. Also due to this a front-runner attacker who might know about rare &lt;code&gt;tokenId&lt;/code&gt;s can look into mempool and frontrun to get those NFTs as we store &lt;code&gt;tokenId&lt;/code&gt; and &lt;code&gt;index&lt;/code&gt; in storage while miniting [4]. With additional data structures there is always a risk for bugs in implementation [3].&lt;/p&gt;&lt;p&gt;Though these all can be mitigated too:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;strong&gt;DoS&lt;/strong&gt; can be mitigated by limiting the data being sent for each transaction.&lt;/li&gt;&lt;li&gt;&lt;strong&gt;Bugs&lt;/strong&gt; can be avoided by proper testing and auditing, running the contract in testnets before putting it on mainnet.&lt;/li&gt;&lt;li&gt;&lt;strong&gt;Scalability&lt;/strong&gt; by proper consideration of project details and relying on off chain data, using oracles for that data. Also to try making it more modular.&lt;/li&gt;&lt;li&gt;&lt;strong&gt;Front-running&lt;/strong&gt; is always an issue but one can consider commit-reveal schemes, time lock for addresses, increase in randomness, not disclosing the raribility of tokens before minting.&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;All the issues are quite common in most of the smart contracts. We always got to tackle them anyway :wink:.&lt;/p&gt;&lt;h2&gt;Use Cases&lt;/h2&gt;&lt;p&gt;ERC721 Enumerable is ideal for projects &lt;/p&gt;&lt;ul&gt;&lt;li&gt;that require efficient enumeration of NFTs, such as marketplaces or galleries.&lt;/li&gt;&lt;li&gt;that need to fetch data for single token by &lt;code&gt;tokenID&lt;/code&gt; or &lt;code&gt;owner&lt;/code&gt;&lt;/li&gt;&lt;li&gt;that has an NFT collection where minting is random and tracking them is essential&lt;/li&gt;&lt;/ul&gt;&lt;blockquote&gt;&lt;p&gt;The job of NFT marketplaces like OpenSea and Rarible would be very tough and they might had to go for a centralised API to keep track of NFTs if ERC721Enumerable doesn’t exist&lt;/p&gt;&lt;/blockquote&gt;&lt;h3&gt;Key Considerations for Users&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;Understand Gas Implications&lt;/strong&gt;: Be aware of the gas costs associated with large-scale enumeration.&lt;/p&gt;&lt;p&gt;&lt;strong&gt;Scalability Planning&lt;/strong&gt;: Plan for potential scalability challenges as your NFT collection grows.&lt;/p&gt;&lt;h2&gt;Conclusion&lt;/h2&gt;&lt;p&gt;ERC721 Enumerable extends the basic ERC721 functionality to efficiently track and enumerate tokens. It balances the need for detailed information with the practical considerations of gas costs and blockchain efficiency. Understanding its use and underlying structure is crucial for developing robust and efficient NFT projects.&lt;/p&gt;</content:encoded></item><item><title><![CDATA[Mastering Fixed Point Arithmetic in Solidity]]></title><description><![CDATA[Mastering Fixed Point Arithmetic in Solidity In the realm of blockchain and smart contract development, efficient and accurate arithmetic…]]></description><link>https://krushiraj.github.io/writings/fixed-point-arithmetic-solidity/</link><guid isPermaLink="true">https://krushiraj.github.io/writings/fixed-point-arithmetic-solidity/</guid><pubDate>Sat, 23 Dec 2023 00:00:00 GMT</pubDate><content:encoded>&lt;h1&gt;Mastering Fixed Point Arithmetic in Solidity&lt;/h1&gt;&lt;p&gt;In the realm of blockchain and smart contract development, efficient and accurate arithmetic operations are crucial. Solidity inherently supports integer arithmetic. However, there are scenarios where we require more precision, and this is where fixed point arithmetic enters the fray. &lt;/p&gt;&lt;p&gt;Fixed point arithmetic allows for fractional calculations, bridging the gap between integer arithmetic’s limitations and the necessity for precision in certain calculations.&lt;/p&gt;&lt;p&gt;Let’s delve into the FixedPointMathLib, one of the the libraries that facilitate fixed point arithmetic in Solidity , available on GitHub, source file located &lt;a href=&quot;https://github.com/Vectorized/solady/blob/main/src/utils/FixedPointMathLib.sol&quot;&gt;here&lt;/a&gt;. To understand its core functionalities and how you can leverage it in your smart contract projects. We’ll try to understand what &lt;strong&gt;Fixed Point Arithmetic&lt;/strong&gt; is and also go through some code in the library aforementioned.&lt;/p&gt;&lt;h2&gt;Understanding Fixed Point Arithmetic&lt;/h2&gt;&lt;p&gt;In fixed point arithmetic, numbers are represented as integers, but a predefined scale factor indicates the decimal point’s position. For instance, if the scale factor is &lt;code&gt;100&lt;/code&gt;, the number &lt;code&gt;12345&lt;/code&gt; represents &lt;code&gt;123.45&lt;/code&gt;. This method allows for fractional computations while utilising integer arithmetic operations, thus maintaining a balance between precision and performance. The scale factor can change depending on our requirement for precision.&lt;/p&gt;&lt;h2&gt;Why even use a Library for this?&lt;/h2&gt;&lt;p&gt;If you’re familiar with other programming languages then you would have already known that most of the languages support floating point and fixed point numbers by default with some data types. For example you can see &lt;code&gt;float&lt;/code&gt; and &lt;code&gt;double&lt;/code&gt; types in C/C++. If you can remember we have no such data types in Solidity. That is for a reason, to put it simple it is due to the inconsistencies in the handling and implementation of fractional numbers on machines. Due to these inconsistencies, we might end up in multiple forks of the chain due to minor changes in data on chain.&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;Need to know more? Your rabbit hole starts &lt;a href=&quot;https://ethereum.stackexchange.com/a/87235&quot;&gt;here&lt;/a&gt;&lt;/p&gt;&lt;/blockquote&gt;&lt;h2&gt;FixedPointMathLib&lt;/h2&gt;&lt;p&gt;Let us look into some functions what this library offers us.&lt;/p&gt;&lt;h3&gt;mulWad&lt;/h3&gt;&lt;p&gt;The &lt;code&gt;mulWad&lt;/code&gt; function is designed to multiply two fixed point numbers. Here’s the function signature:&lt;/p&gt;&lt;pre&gt;&lt;code class=&quot;language-solidity&quot;&gt;function mulWad(uint256 x, uint256 y) internal pure returns (uint256 z)
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Parameters:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;code&gt;a&lt;/code&gt; and &lt;code&gt;b&lt;/code&gt;: The fixed point numbers to be multiplied.&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;If you observe, we have something called &lt;code&gt;Wad&lt;/code&gt; in function name. That basically means that the scale factor here is &lt;code&gt;10**18&lt;/code&gt; (alleged origin of &lt;code&gt;wad&lt;/code&gt; comes from &lt;a href=&quot;https://github.com/dapphub/ds-math/blob/master/README.md&quot;&gt;here&lt;/a&gt;)&lt;/p&gt;&lt;p&gt;The function employs Yul to perform the multiplication operation efficiently. By leveraging Yul, the &lt;code&gt;mulWad&lt;/code&gt; function ensures that the multiplication is carried out with a low gas cost, which is crucial for blockchain operations.&lt;/p&gt;&lt;pre&gt;&lt;code class=&quot;language-solidity&quot;&gt;/// @solidity memory-safe-assembly
assembly {
    // Equivalent to `require(y == 0 || x &amp;lt;= type(uint256).max / y)`.
    if mul(y, gt(x, div(not(0), y))) {
        mstore(0x00, 0xbac65e5b) // `MulWadFailed()`.
        revert(0x1c, 0x04)
    }
    z := div(mul(x, y), WAD)
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;The &lt;code&gt;mulWad&lt;/code&gt; function first computes the product of &lt;code&gt;a&lt;/code&gt; and &lt;code&gt;b&lt;/code&gt; using integer multiplication, then adjusts the result for the scale factor by dividing the product by &lt;code&gt;10 ** 18&lt;/code&gt;(in the file at L51 &lt;code&gt;WAD&lt;/code&gt; constant is defined). This way, the function yields the correct fixed point representation of the product.&lt;/p&gt;&lt;pre&gt;&lt;code class=&quot;language-solidity&quot;&gt;if mul(y, gt(x, div(not(0), y)))
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;If you observe the code checks for the overflow case and makes sure to revert the execution with error.&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;code&gt;not(0)&lt;/code&gt; - bit wise negation results in the max int value. Ex: &lt;code&gt;0x00&lt;/code&gt; will be &lt;code&gt;0xFF&lt;/code&gt; when negated - let us assume this result as &lt;code&gt;maxInt&lt;/code&gt;. Here it is actually max value a &lt;code&gt;uint256&lt;/code&gt; can take.&lt;/li&gt;&lt;li&gt;&lt;code&gt;div(not(0), y))&lt;/code&gt; - now this will be &lt;code&gt;div(maxInt, y)&lt;/code&gt; - lets assume this as &lt;code&gt;quotient&lt;/code&gt;&lt;/li&gt;&lt;li&gt;&lt;code&gt;gt(x, div(not(0), y))&lt;/code&gt; - this will check if &lt;code&gt;x &amp;gt; quotient&lt;/code&gt;. Simple check to make sure that &lt;code&gt;x * y &amp;lt; maxInt&lt;/code&gt;. Lets assume this result as &lt;code&gt;check&lt;/code&gt;, which can have a value of &lt;code&gt;0&lt;/code&gt; and &lt;code&gt;1&lt;/code&gt;&lt;/li&gt;&lt;li&gt;&lt;code&gt;iszero(mul(y, iszero(mul(WAD, gt(x, div(not(0), WAD))))))&lt;/code&gt; - simply means that verifying if &lt;code&gt;y * check&lt;/code&gt; is &lt;code&gt;0&lt;/code&gt; or not&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;This makes it safe to avoid unexpected behaviour of the smart contracts.&lt;/p&gt;&lt;pre&gt;&lt;code class=&quot;language-solidity&quot;&gt;mstore(0x00, 0xbac65e5b) // `MulWadFailed()`.
revert(0x1c, 0x04)
&lt;/code&gt;&lt;/pre&gt;&lt;ul&gt;&lt;li&gt;&lt;code&gt;mstore(0x00, 0xbac65e5b)&lt;/code&gt;: This line is storing the value &lt;code&gt;0xbac65e5b&lt;/code&gt; at memory location &lt;code&gt;0x00&lt;/code&gt;. The value &lt;code&gt;0xbac65e5b&lt;/code&gt; is likely the hash of the error message &lt;code&gt;MulWadFailed()&lt;/code&gt;. Solidity uses the first 4 bytes of the &lt;code&gt;keccak-256&lt;/code&gt; hash of the function signature to identify it. This is a common practice to save gas instead of storing the entire string error message.&lt;/li&gt;&lt;li&gt;&lt;code&gt;revert(0x1c, 0x04)&lt;/code&gt;: This line reverts the transaction. The &lt;code&gt;revert&lt;/code&gt; opcode takes two parameters: the first is the starting position in memory of the data to return, and the second is the size of this data in bytes. In this case, &lt;code&gt;0x1c&lt;/code&gt; is the position in memory where the data starts, and &lt;code&gt;0x04&lt;/code&gt; is the size of the data to return. It means that when the transaction is reverted, it will return 4 bytes of data starting from the 28th byte (&lt;code&gt;0x1c&lt;/code&gt; in hexadecimal) of memory.&lt;/li&gt;&lt;/ul&gt;&lt;h3&gt;mulWadUp&lt;/h3&gt;&lt;p&gt;This is similar to &lt;code&gt;mulWad&lt;/code&gt; but the result is rounded up. For the other case it is rounded down&lt;/p&gt;&lt;pre&gt;&lt;code class=&quot;language-solidity&quot;&gt;z := add(iszero(iszero(mod(mul(x, y), WAD))), div(mul(x, y), WAD))
&lt;/code&gt;&lt;/pre&gt;&lt;ul&gt;&lt;li&gt;&lt;code&gt;iszero(mod(mul(x, y), WAD))&lt;/code&gt;- check if &lt;code&gt;(x * y) % WAD == 0&lt;/code&gt;- If it is zero, it means the product is perfectly divisible by &lt;code&gt;WAD&lt;/code&gt; and there’s no fractional part to consider for rounding&lt;/li&gt;&lt;li&gt;&lt;code&gt;iszero(iszero(mod(mul(x, y), WAD)))&lt;/code&gt;: This double-negative check turns a true condition (non-zero modulus) into a false one and vice versa. So, if there is a non-zero fractional part, the &lt;code&gt;iszero&lt;/code&gt; function will return &lt;code&gt;0&lt;/code&gt; for non-zero and then &lt;code&gt;iszero&lt;/code&gt; again will turn that &lt;code&gt;0&lt;/code&gt; into &lt;code&gt;1&lt;/code&gt;.&lt;/li&gt;&lt;li&gt;&lt;code&gt;add(iszero(iszero(mod(mul(x, y), WAD))), div(mul(x, y), WAD))&lt;/code&gt;: Adds the result of the double &lt;code&gt;iszero&lt;/code&gt; check to the quotient of the product divided by &lt;code&gt;WAD&lt;/code&gt;. This effectively rounds up the result if there was a non-zero fractional part.&lt;/li&gt;&lt;/ul&gt;&lt;h3&gt;divWad&lt;/h3&gt;&lt;p&gt;Similarly, the &lt;code&gt;divWad&lt;/code&gt; function facilitates division operations between fixed point numbers. Here’s the function signature:&lt;/p&gt;&lt;pre&gt;&lt;code class=&quot;language-solidity&quot;&gt;function divWad(uint256 x, uint256 y) internal pure returns (uint256 z)
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Parameters are similar to &lt;code&gt;mulWad&lt;/code&gt;, with &lt;code&gt;a&lt;/code&gt; and &lt;code&gt;b&lt;/code&gt; being the operands&lt;/p&gt;&lt;p&gt;There are checks here as well, just like we do in other functions to make sure the results are not inconsistence or overflowed or underflowed.&lt;/p&gt;&lt;pre&gt;&lt;code class=&quot;language-solidity&quot;&gt;assembly {
    // Equivalent to `require(y != 0 &amp;amp;&amp;amp; (WAD == 0 || x &amp;lt;= type(uint256).max / WAD))`.
    if iszero(mul(y, iszero(mul(WAD, gt(x, div(not(0), WAD)))))) {
        mstore(0x00, 0x7c5f487d) // `DivWadFailed()`.
        revert(0x1c, 0x04)
    }
    z := div(mul(x, WAD), y)
}
&lt;/code&gt;&lt;/pre&gt;&lt;ul&gt;&lt;li&gt;&lt;code&gt;mul(WAD, gt(x, div(not(0), WAD)))&lt;/code&gt;: This performs a check to ensure that the value of &lt;code&gt;x&lt;/code&gt; is not too large to be multiplied by the scaling factor &lt;code&gt;WAD&lt;/code&gt; without causing an overflow. The &lt;code&gt;gt&lt;/code&gt; function checks if &lt;code&gt;x&lt;/code&gt; is greater than the largest &lt;code&gt;uint256&lt;/code&gt; divided by &lt;code&gt;WAD&lt;/code&gt;. If &lt;code&gt;x&lt;/code&gt; is indeed greater, &lt;code&gt;gt(x, div(not(0), WAD))&lt;/code&gt; would return &lt;code&gt;1&lt;/code&gt; indicating an overflow. If &lt;code&gt;x&lt;/code&gt; is not greater, the result would be &lt;code&gt;0&lt;/code&gt;.    &lt;/li&gt;&lt;li&gt;&lt;code&gt;iszero(mul(WAD, gt(x, div(not(0), WAD))))&lt;/code&gt;: This is checking the result of the multiplication for &lt;code&gt;0&lt;/code&gt;. If &lt;code&gt;x &amp;lt;= uint256.max / WAD&lt;/code&gt;, then &lt;code&gt;gt(x, div(not(0), WAD))&lt;/code&gt; would be &lt;code&gt;0&lt;/code&gt;, and multiplying by &lt;code&gt;WAD&lt;/code&gt; would still be &lt;code&gt;0&lt;/code&gt;, resulting in &lt;code&gt;iszero&lt;/code&gt; returning &lt;code&gt;1&lt;/code&gt;. If &lt;code&gt;x&lt;/code&gt; were too large, the result of &lt;code&gt;gt(x, div(not(0), WAD))&lt;/code&gt; would be &lt;code&gt;1&lt;/code&gt;, and &lt;code&gt;mul(WAD, 1)&lt;/code&gt; would be &lt;code&gt;WAD&lt;/code&gt;, making &lt;code&gt;iszero&lt;/code&gt; return &lt;code&gt;0&lt;/code&gt;.&lt;/li&gt;&lt;li&gt;&lt;code&gt;mul(y, iszero(mul(WAD, gt(x, div(not(0), WAD)))))&lt;/code&gt;: This multiplies &lt;code&gt;y&lt;/code&gt; with the result of the previous &lt;code&gt;iszero&lt;/code&gt; check. If the previous result was &lt;code&gt;1&lt;/code&gt;, it implies that there is no risk of overflow when &lt;code&gt;x&lt;/code&gt; is multiplied by &lt;code&gt;WAD&lt;/code&gt;, and it proceeds to multiply &lt;code&gt;y&lt;/code&gt; by &lt;code&gt;1&lt;/code&gt; (effectively leaving &lt;code&gt;y&lt;/code&gt; unchanged). If the result was &lt;code&gt;0&lt;/code&gt;, it means that there was a risk of overflow, and multiplying &lt;code&gt;y&lt;/code&gt; by &lt;code&gt;0&lt;/code&gt; would yield &lt;code&gt;0&lt;/code&gt;.&lt;/li&gt;&lt;li&gt;&lt;code&gt;iszero(...)&lt;/code&gt;: If &lt;code&gt;y&lt;/code&gt; was &lt;code&gt;0&lt;/code&gt; or if &lt;code&gt;x&lt;/code&gt; was safe to multiply by &lt;code&gt;WAD&lt;/code&gt; without causing an overflow, then the entire multiplication expression would evaluate to &lt;code&gt;0&lt;/code&gt;, and &lt;code&gt;iszero&lt;/code&gt; would return &lt;code&gt;1&lt;/code&gt;. If there was a potential overflow detected, the multiplication result would not be &lt;code&gt;0&lt;/code&gt;, and &lt;code&gt;iszero&lt;/code&gt; would return &lt;code&gt;0&lt;/code&gt;.&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;This is making sure that we make the calculations in the bounds and makes sure no unexpected behaviour happens if there is an overflow or underflow.&lt;/p&gt;&lt;h3&gt;divWadUp&lt;/h3&gt;&lt;p&gt;This is similar to &lt;code&gt;divWad&lt;/code&gt; but the result is rounded up. For the other case it is rounded down. A similar approach to round up used in &lt;code&gt;mulWadUp&lt;/code&gt; is being used here but with a different values.&lt;/p&gt;&lt;h2&gt;How would this help?&lt;/h2&gt;&lt;h3&gt;Pros:&lt;/h3&gt;&lt;ol&gt;&lt;li&gt;&lt;strong&gt;Precision&lt;/strong&gt;: It offers higher precision for fractional numbers compared to integer arithmetic, which is crucial for financial computations that require decimal points.&lt;/li&gt;&lt;li&gt;&lt;strong&gt;Gas Efficiency&lt;/strong&gt;: The library uses Yul, an intermediate language that compiles down to EVM bytecode, often leading to more gas-efficient contract execution than using Solidity alone.&lt;/li&gt;&lt;li&gt;&lt;strong&gt;Safety&lt;/strong&gt;: It includes checks to prevent overflows and underflows, common pitfalls in smart contract development that can lead to significant vulnerabilities.&lt;/li&gt;&lt;li&gt;&lt;strong&gt;Convenience&lt;/strong&gt;: Developers can perform arithmetic operations without implementing their own fixed-point math system, saving time and reducing the risk of errors.&lt;/li&gt;&lt;li&gt;&lt;strong&gt;Interoperability&lt;/strong&gt;: It uses a standard format (wad) that is widely recognized in the Ethereum ecosystem, making it easier to integrate with other contracts and systems.&lt;/li&gt;&lt;li&gt;&lt;strong&gt;Transparency&lt;/strong&gt;: The operations are transparent and verifiable, ensuring that contract behavior can be predicted and validated, which is essential for trust in DeFi applications.&lt;/li&gt;&lt;/ol&gt;&lt;h3&gt;Cons:&lt;/h3&gt;&lt;ol&gt;&lt;li&gt;&lt;strong&gt;Complexity&lt;/strong&gt;: For developers unfamiliar with fixed-point arithmetic, there may be a learning curve to understand how to properly use the library functions.&lt;/li&gt;&lt;li&gt;&lt;strong&gt;Code Size&lt;/strong&gt;: Including an external library can increase the size of the contract bytecode, potentially leading to higher deployment costs.&lt;/li&gt;&lt;li&gt;&lt;strong&gt;Overhead&lt;/strong&gt;: While the library is optimized for gas, using any library still adds a layer of complexity and gas overhead compared to native operations.&lt;/li&gt;&lt;li&gt;&lt;strong&gt;Limited Range&lt;/strong&gt;: Fixed-point numbers have a limited range compared to floating-point numbers, which may be a limitation for some applications.&lt;/li&gt;&lt;li&gt;&lt;strong&gt;Specificity&lt;/strong&gt;: The library is designed for a specific scaling factor (wad), which may not be suitable for all use cases requiring different levels of precision.&lt;/li&gt;&lt;li&gt;&lt;strong&gt;Upgradability&lt;/strong&gt;: If the library is found to have a bug or requires an update, depending on how it’s integrated, it might be difficult to upgrade the smart contracts that use it.&lt;/li&gt;&lt;/ol&gt;&lt;h2&gt;Practical Applications&lt;/h2&gt;&lt;p&gt;These functions are indispensable when dealing with financial calculations, simulations, or any scenario demanding precision beyond integer arithmetic in your smart contracts. By understanding and utilising fixed point arithmetic through the FixedPointMathLib, you can ensure that your smart contracts operate accurately and efficiently, making your dApps more robust and reliable. Examples as follows:&lt;/p&gt;&lt;ol&gt;&lt;li&gt;&lt;strong&gt;DeFi Yield Farming Platforms&lt;/strong&gt;: Calculating rewards based on staking durations and amounts often requires precision to ensure users receive an accurate share of the yield.&lt;/li&gt;&lt;li&gt;&lt;strong&gt;Automated Market Makers (AMMs)&lt;/strong&gt;: AMMs use complex formulas like the constant product formula (&lt;code&gt;x * y = k&lt;/code&gt;) for liquidity pools.&lt;/li&gt;&lt;li&gt;&lt;strong&gt;Token Vesting Contracts&lt;/strong&gt;: When tokens are vested, they might be released continuously over time, which could require division to calculate the fraction of tokens to release at any given point.&lt;/li&gt;&lt;li&gt;&lt;strong&gt;Oracles&lt;/strong&gt;: Price oracles that feed external data (like currency exchange rates) into the blockchain often require high precision. When these rates are used to determine transaction values or contract terms, fixed-point arithmetic helps maintain accuracy.&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;Also other examples include &lt;strong&gt;Insurance Contracts&lt;/strong&gt;, &lt;strong&gt;Bonding Curves&lt;/strong&gt;,  &lt;strong&gt;Interest Rate Models&lt;/strong&gt;, &lt;strong&gt;Stablecoin Pegs&lt;/strong&gt;, &lt;strong&gt;Financial Derivatives&lt;/strong&gt;, &lt;strong&gt;Scientific Computations&lt;/strong&gt;,  &lt;strong&gt;Gaming and Gambling Contracts&lt;/strong&gt;, &lt;strong&gt;Fractional NFTs&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;In conclusion, FixedPointMathLib’s functions are vital tools in the toolkit of a Solidity developer aiming to tackle complex arithmetic scenarios in smart contract development. Through a deep understanding of these functions and fixed point arithmetic, you’re well on your way to mastering the mathematical underpinnings of Solidity and developing sophisticated smart contracts for the Ethereum blockchain.&lt;/p&gt;</content:encoded></item><item><title><![CDATA[FixedPointMathLib vs ABDKMath64x64 - What should you use?]]></title><description><![CDATA[FixedPointMathLib vs ABDKMath64x64 - What should you use? In Solidity we don't have  Fixed Point Arithmetic  out-of-the-box, hence we rely…]]></description><link>https://krushiraj.github.io/writings/fixed-point-vs-abdk-math/</link><guid isPermaLink="true">https://krushiraj.github.io/writings/fixed-point-vs-abdk-math/</guid><pubDate>Sat, 23 Dec 2023 00:00:00 GMT</pubDate><content:encoded>&lt;h1&gt;FixedPointMathLib vs ABDKMath64x64 - What should you use?&lt;/h1&gt;&lt;p&gt;In Solidity we don’t have &lt;em&gt;Fixed Point Arithmetic&lt;/em&gt; out-of-the-box, hence we rely on various libraries to make it easier and safer for us. &lt;a href=&quot;https://github.com/Vectorized/solady/blob/main/src/utils/FixedPointMathLib.sol&quot;&gt;FixedPointMathLib&lt;/a&gt; and &lt;a href=&quot;https://github.com/abdk-consulting/abdk-libraries-solidity/blob/master/ABDKMath64x64.sol&quot;&gt;ABDKMath64x64&lt;/a&gt; are some of the well known libraries that handle this.&lt;/p&gt;&lt;p&gt;Lets see which one should you be using and why? There can be a lot of factor to support the decision of which one to use, we will go through a couple of things that matter and see which one has to be used based on the scenario that a smart contract developer has.&lt;/p&gt;&lt;h2&gt;Differences&lt;/h2&gt;&lt;ol&gt;&lt;li&gt;&lt;p&gt;&lt;strong&gt;Precision and Range&lt;/strong&gt;:    &lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;strong&gt;ABDKMath64x64&lt;/strong&gt;: Operates with a 64.64 fixed point math library, meaning it uses 64 bits for the integer part and 64 bits for the fractional part. This allows for high precision and a wide range of numbers, but it can be more computationally intensive.&lt;/li&gt;&lt;li&gt;&lt;strong&gt;FixedPointMathLib&lt;/strong&gt;: This library uses a different approach and have a different precision range with WAD factor which is &lt;code&gt;10**18&lt;/code&gt;.&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;strong&gt;Performance&lt;/strong&gt;:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;strong&gt;ABDKMath64x64&lt;/strong&gt;: Known for high precision, but this can come at the cost of gas (when used in Ethereum smart contracts), as operations are more complex and you might have to keep converting the numbers from &lt;code&gt;int&lt;/code&gt; to &lt;code&gt;64x64&lt;/code&gt; format.&lt;/li&gt;&lt;li&gt;&lt;strong&gt;FixedPointMathLib&lt;/strong&gt;: Less gas-intensive for certain operations as it relies on the Yul to make use of direct math functions mostly.&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;strong&gt;Use Cases&lt;/strong&gt;:    &lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;strong&gt;ABDKMath64x64&lt;/strong&gt;: Its high precision makes it suitable for financial applications, complex calculations, and anywhere that a very small margin of error is critical.&lt;/li&gt;&lt;li&gt;&lt;strong&gt;FixedPointMathLib&lt;/strong&gt;: Good to use when we have simple calculations that can be done with in 18 decimal point precision. Most of the transactions of ERC20 and user facing data will be similar to this. So better for naive usage.&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;/ol&gt;&lt;h2&gt;Code in action&lt;/h2&gt;&lt;pre&gt;&lt;code class=&quot;language-solidity&quot;&gt;// SPDX-License-Identifier: MIT
pragma  solidity  &amp;gt;=0.8.0;

import  &amp;quot;https://github.com/Vectorized/solady/blob/main/src/utils/FixedPointMathLib.sol&amp;quot;;

import  &amp;quot;https://github.com/abdk-consulting/abdk-libraries-solidity/blob/master/ABDKMath64x64.sol&amp;quot;;

using FixedPointMathLib for  uint256;
using FixedPointMathLib for  int256;

using ABDKMath64x64 for  int128;

contract Math {
    function mul0(uint256 a,  uint256 b)  public  pure  returns  (uint256 c)  {
        c = a * b;
    }
    
    function mul1(int128 a,  int128 b)  public  pure  returns  (int128 c)  {
        c = a.mul(b);
    }
    
    function mul2(uint256 a,  uint256 b)  public  pure  returns  (uint256 c)  {
        int128 aFixed = ABDKMath64x64.fromUInt(a);
        int128 bFixed = ABDKMath64x64.fromUInt(b);

        // Perform the calculation using ABDKMath64x64
        int128 rawResult = aFixed.mul(bFixed);
        
        // Convert the result back to uint for the return value
        c = ABDKMath64x64.toUInt(rawResult);
    }

    function mul3(uint256 a,  uint256 b)  public  pure  returns  (uint256 c)  {
        c = a.mulWad(b);
    }

    function pow0(int256 a,  int256 b)  public  pure  returns  (int256 c)  {
        c = a.powWad(b);
    }

    function pow1(int128 a,  uint256 b)  internal  pure  returns  (int128 c)  {
        c = a.pow(b);
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;This smart contract tries to make use of both the libraries to do some basic multiplication and then calculate power.&lt;/p&gt;&lt;p&gt;Now we will try to execute each of those and see how each performs. We only care about inputs, outputs and gas here. So rest of logs are omitted here.&lt;/p&gt;&lt;h3&gt;mul0&lt;/h3&gt;&lt;pre&gt;&lt;code&gt;to: Math.mul0(uint256,uint256)

execution cost
1049 gas (Cost only applies when called by a contract)[]

decoded input
{ &amp;quot;uint256 a&amp;quot;: &amp;quot;120&amp;quot;, &amp;quot;uint256 b&amp;quot;: &amp;quot;130&amp;quot; }[]

decoded output
{ &amp;quot;0&amp;quot;: &amp;quot;uint256: c 15600&amp;quot; }[]
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;This is direct multiplication in solidity without any help of libraries. Simple to understand inputs and output.&lt;/p&gt;&lt;h3&gt;mul1&lt;/h3&gt;&lt;pre&gt;&lt;code&gt;to

Math.mul1(int128,int128) 0x9D7f74d0C41E726EC95884E0e97Fa6129e3b5E99[]

execution cost
1058 gas (Cost only applies when called by a contract)[]

decoded input
{ &amp;quot;int128 a&amp;quot;: &amp;quot;120&amp;quot;, &amp;quot;int128 b&amp;quot;: &amp;quot;130&amp;quot; }[]

decoded output
{ &amp;quot;0&amp;quot;: &amp;quot;int128: c 0&amp;quot; }[]
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;The output here is 0. Any idea about why is that 0?
It is because the &lt;em&gt;ABDKMath64x64&lt;/em&gt; library expects the number to be in the form of &lt;code&gt;64.64&lt;/code&gt; bit representation. That means we need to convert the number to binary and then add 64 bit of binary 0 to make fractional part 0 for that number. Lets do that for 120 and 130
| decimal | binary (without 64 zeros for fractional part) | decimal for 64.64 |
|----------|---------|------------------|
|120 | 1111000 | 2213609288845146193920 |
|130 | 10000010 | 2398076729582241710080 |&lt;/p&gt;&lt;pre&gt;&lt;code&gt;to

Math.mul1(int128,int128) 0x9D7f74d0C41E726EC95884E0e97Fa6129e3b5E99[]

execution cost
1058 gas (Cost only applies when called by a contract)[]

decoded input
{ &amp;quot;int128 a&amp;quot;: &amp;quot;2213609288845146193920&amp;quot;, &amp;quot;int128 b&amp;quot;: &amp;quot;2398076729582241710080&amp;quot; }[]

decoded output
{ &amp;quot;0&amp;quot;: &amp;quot;int128: c 287769207549869005209600&amp;quot; }[]
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;code&gt;287769207549869005209600 = 111100111100000000000000000000000000000000000000000000000000000000000000000000 = 15600&lt;/code&gt;&lt;/p&gt;&lt;h3&gt;mul2&lt;/h3&gt;&lt;pre&gt;&lt;code&gt;Math.mul2(uint256,uint256) 0x9D7f74d0C41E726EC95884E0e97Fa6129e3b5E99[]

execution cost
1351 gas (Cost only applies when called by a contract)[]

decoded input
{ &amp;quot;uint256 a&amp;quot;: &amp;quot;120&amp;quot;, &amp;quot;uint256 b&amp;quot;: &amp;quot;130&amp;quot; }[]

decoded output
{ &amp;quot;0&amp;quot;: &amp;quot;uint256: c 15600&amp;quot; }[]
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;This is using &lt;em&gt;ABDKMath64x64&lt;/em&gt;, but the catch here is we used extra helpers to convert instead of doing it all by ourselves like we did before. Hence extra gas cost.&lt;/p&gt;&lt;h3&gt;mul3&lt;/h3&gt;&lt;pre&gt;&lt;code&gt;to

Math.mul3(uint256,uint256) 0x9D7f74d0C41E726EC95884E0e97Fa6129e3b5E99[]

execution cost
877 gas (Cost only applies when called by a contract)[]

decoded input
{ &amp;quot;uint256 a&amp;quot;: &amp;quot;128&amp;quot;, &amp;quot;uint256 b&amp;quot;: &amp;quot;128&amp;quot; }[]

decoded output
{ &amp;quot;0&amp;quot;: &amp;quot;uint256: c 0&amp;quot; }[]
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;The same again, not the results we wanted to see. &lt;em&gt;FixedPointMathLib&lt;/em&gt; expects a number with 18 decimal places i.e., we need to append 18 zeros after the number&lt;/p&gt;&lt;pre&gt;&lt;code&gt;to

Math.mul3(uint256,uint256) 0x9D7f74d0C41E726EC95884E0e97Fa6129e3b5E99[]

execution cost
877 gas (Cost only applies when called by a contract)[]


decoded input
{ &amp;quot;uint256 a&amp;quot;: &amp;quot;120000000000000000000&amp;quot;, &amp;quot;uint256 b&amp;quot;: &amp;quot;130000000000000000000&amp;quot; }[]

decoded output
{ &amp;quot;0&amp;quot;: &amp;quot;uint256: c 15600000000000000000000&amp;quot; }[]
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Now we get the correct output but with 18 zeros appended to it.&lt;/p&gt;&lt;h3&gt;pow0&lt;/h3&gt;&lt;pre&gt;&lt;code&gt;to

Math.pow0(int256,int256) 0x9D7f74d0C41E726EC95884E0e97Fa6129e3b5E99[]

execution cost
2723 gas (Cost only applies when called by a contract)[]

decoded input
{ &amp;quot;int256 a&amp;quot;: &amp;quot;2000000000000000000&amp;quot;, &amp;quot;int256 b&amp;quot;: &amp;quot;10000000000000000000&amp;quot; }[]

decoded output
{ &amp;quot;0&amp;quot;: &amp;quot;int256: c 1023999999999999995727&amp;quot; }[]
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Uses the &lt;em&gt;FixedPointMathLib&lt;/em&gt;. I would expect &lt;code&gt;2 ** 10&lt;/code&gt; to be &lt;code&gt;1024&lt;/code&gt;. But the value here is &lt;code&gt;1023.999.....5727&lt;/code&gt; which is not correct but close when we round up.&lt;/p&gt;&lt;h3&gt;pow1&lt;/h3&gt;&lt;p&gt;Users the &lt;em&gt;ABDKMath64x64&lt;/em&gt;. For conversion
&lt;code&gt;2&lt;/code&gt; - &lt;code&gt;10&lt;/code&gt; in binary and when converted to int with 64 bit decimal places, it is &lt;code&gt;18446744073709551616&lt;/code&gt;
&lt;code&gt;10&lt;/code&gt; - we give this directly as the power is expected in &lt;code&gt;int128&lt;/code&gt; but not &lt;code&gt;64.64&lt;/code&gt;&lt;/p&gt;&lt;pre&gt;&lt;code&gt;to

Math.pow1(int128,uint256) 0xddaAd340b0f1Ef65169Ae5E41A8b10776a75482d[](https://remix.ethereum.org/#)

execution cost

2302 gas (Cost only applies when called by a contract)[](https://remix.ethereum.org/#)

input

0x9ea...0000a[](https://remix.ethereum.org/#)

decoded input

{ &amp;quot;int128 a&amp;quot;: &amp;quot;36893488147419103232&amp;quot;, &amp;quot;uint256 b&amp;quot;: &amp;quot;10&amp;quot; }[](https://remix.ethereum.org/#)

decoded output

{ &amp;quot;0&amp;quot;: &amp;quot;int128: c 18889465931478580854784&amp;quot; }[](https://remix.ethereum.org/#)
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;The output when converted to binary will give us &lt;code&gt;10000000000+64 zeros&lt;/code&gt;. Those 64 zeros can be omitted to get the integral part which then converts to &lt;code&gt;1024&lt;/code&gt;, the exact output for &lt;code&gt;2 ** 10&lt;/code&gt;&lt;/p&gt;&lt;h3&gt;Gas costs&lt;/h3&gt;&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;&lt;/th&gt;&lt;th&gt;ABDKMath64x64&lt;/th&gt;&lt;th&gt;FixedPointMathLib&lt;/th&gt;&lt;/tr&gt;&lt;/thead&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td&gt;mul&lt;/td&gt;&lt;td&gt;1058&lt;/td&gt;&lt;td&gt;877&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;pow&lt;/td&gt;&lt;td&gt;2302&lt;/td&gt;&lt;td&gt;2723&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;blockquote&gt;&lt;p&gt;If we include gas to convert for &lt;em&gt;ABDKMath64x64&lt;/em&gt; it would add around 300&lt;/p&gt;&lt;/blockquote&gt;&lt;h2&gt;Conclusion&lt;/h2&gt;&lt;p&gt;&lt;em&gt;ABDKMath64x64&lt;/em&gt; is gas efficient for complex calculations and very precise and accurate for smaller integral numbers with large fractional part.
&lt;em&gt;FixedPointMathLib&lt;/em&gt; is good with large numbers and has less precision for more complex calculations, but highly gas efficient for basic math.&lt;/p&gt;&lt;p&gt;So, if you are building something that include complex formulae like bonding curve, exponential farming or anything that requires high precision and complex calculations one should go for &lt;strong&gt;ABDKMath64x64&lt;/strong&gt;, else if you require basic math with low precision which is mostly used in transfer, ERC20 related, more user facing applications and functions one should go for &lt;strong&gt;FixedPointMathLib&lt;/strong&gt;, as for user facing you don’t have to put in extra effort to convert it to &lt;code&gt;64.64&lt;/code&gt;format when compared to &lt;code&gt;WAD&lt;/code&gt;.&lt;/p&gt;</content:encoded></item><item><title><![CDATA[Solving the Wordle Solver]]></title><description><![CDATA[I think there are very less people who are unaware of the popular (at least contemporarily or may be not) game  Wordle . I liked the…]]></description><link>https://krushiraj.github.io/writings/wordle-solver/</link><guid isPermaLink="true">https://krushiraj.github.io/writings/wordle-solver/</guid><pubDate>Thu, 22 Sep 2022 00:00:00 GMT</pubDate><content:encoded>&lt;p&gt;I think there are very less people who are unaware of the popular (at least contemporarily or may be not) game &lt;a href=&quot;https://en.wikipedia.org/wiki/Wordle&quot;&gt;Wordle&lt;/a&gt;. I liked the simplicity and equally challenging pattern of the game. I used to play it to get the final answer right. But eventually the geek in me wanted to write a script that could solve the puzzle without much effort on my brain but a little on my computer’s brain. &lt;/p&gt;&lt;p&gt;You can find the source code here:&lt;/p&gt;&lt;p&gt;&lt;span class=&quot;gh-card-wrap&quot;&gt;&lt;span class=&quot;github-card&quot; data-user=&quot;krushiraj&quot; data-repo=&quot;quiz-writer-bot&quot;&gt;&lt;span class=&quot;loading&quot;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;This post is about the problems that I faced and the decisions I made to get the solver ready for us.&lt;/p&gt;&lt;h2&gt;Why this?&lt;/h2&gt;&lt;p&gt;I found it challenging enough and at the same time the problem statement is very confined so no real intelligence is required. That created the itch in me to solve it just because I know I can do it. So why not give it a try? Also I didn’t want to solve this using the buzzword tech ML, AI etc., not even the deep statistical analysis. Just some overview on data and minimal data analysis and pure algo.&lt;/p&gt;&lt;h2&gt;Identify the pattern&lt;/h2&gt;&lt;p&gt;These are the things that I identified before I started:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;p&gt;The problem is so finite that there are limited number of 5 letter words in English. Digging into some blogs and source code of the game gives me a definite list of what all those words are. So I know what the possible solutions are, now I have to find a way to point me to the correct one.&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;Second thing I found after looking at the list is if we could filter out the words that contain vowels then we will be left with very few guesses to go with&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;Repetition of vowels is very less and repetition of any consonant is less and if we found that letter then it is easy to find that word as it narrows down the guess list by a lot&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;Choose a starting word that could give a clear estimate on what vowels should be neglected. There is a lot of debate on the choice of first word for the game, but my choice was AUDIO. Because it has 4 out of 5 vowels and it could narrow down a lot of guesses.&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h2&gt;Implementation&lt;/h2&gt;&lt;p&gt;I started on with an array of all 5 words that are gonna show up on Wordle game and I wanted to implement an algo with the observations that I made above. I know can heuristically check each word in the array and conclude the shortlist of guesses. But that was not challenging enough, so I wanted it to be a bit more challenging and optimal. So, I build a Trie, a Trie which can mark the existence of letters and non existence of letters (don’t get confused I check existence and non existence by the search algo I have on that trie).&lt;/p&gt;&lt;p&gt;The solver starts with suggesting AUDIO or any other word (if you want) for the first time and then it runs the search on trie and get backs all the possible results, sorted in the way that has more vowels, less repetitions. Then we can update the game state telling which letter exists in the word, which letter is in correct place and which doesn’t exist in the word&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;You can have a look at the read me file of the project I mentioned. It will have the visual representation. I’ll attach screenshots here too!
&lt;img src=&quot;https://raw.githubusercontent.com/krushiraj/krushiraj.github.io/dev/portfolio/content/writings/wordle-solver/example.png&quot;/&gt;&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;So if a letter in 2nd spot is green, I search for all words in trie which should have that particular letter as second letter.&lt;/p&gt;&lt;p&gt;If a letter in 4th spot is yellow, then there is no point in guessing with the words that have that letter in 4th spot. But also I filter only those words which has that letter in another spot than 4th.&lt;/p&gt;&lt;p&gt;This way we can filter a lot of words and come to a final word which mostly should be the answer in the 3rd or 4th attempt. Some edge cases might lead you to go till 6th chance. There could also be a possibility that we might miss 7-8 words within those 6 chance limit. So, sometimes human intuitiveness works better than algos - this is what I understood after using this script for a day, so I started to print the word that script guesses and then all possible words after that so sometimes we can pick what word to give.&lt;/p&gt;&lt;p&gt;It is always fun building such scripts for myself and the learnings that I have with these are immense. See you later, till my next script 😜.&lt;/p&gt;</content:encoded></item><item><title><![CDATA[Well Knitted Ecosystem]]></title><description><![CDATA[I’m a big fan of devices and application that are well knitted together on different form factors. I’m one of those nerds who wants to have…]]></description><link>https://krushiraj.github.io/writings/well-knitted-ecosystem/</link><guid isPermaLink="true">https://krushiraj.github.io/writings/well-knitted-ecosystem/</guid><pubDate>Tue, 13 Sep 2022 00:00:00 GMT</pubDate><content:encoded>&lt;p&gt;I’m a big fan of devices and application that are well knitted together on different form factors. I’m one of those nerds who wants to have almost any major form factor device that is available in market. I would love a device if it has better integration and sharing/syncing of data between the other devices that I have. I want my data or apps to be available on almost all the devices I own so I don’t have to feel that I’m missing out on something. So that is the crux on why I love devices which form an ecosystem.&lt;/p&gt;&lt;h2&gt;My first love for ecosystems&lt;/h2&gt;&lt;p&gt;This started when Microsoft launched the theme for One OS, One Core, One Experience in their software. Windows 8 was their first OS as per my knowledge with this motto. That was indeed my my first love for ecosystem. They had desktop, laptop, phone, phablet, tablet form factors and even a smart watch, which were all supported by this one OS. Eventually Xbox got added. I was literally a fan of that idea and that is when I became the fanboi for MSFT. Except for watch I used all form factors and it was really good to see and that was a great experience, also the syncing of data between all these devices was some kind of magic for me back then. They tried a lot with Windows 10 for this motto and they even added new Mixed Reality devices under the One OS, One Core umbrella. But eventually they couldn’t achieve the final goal what they believed in but that was a great and decent try.&lt;/p&gt;&lt;h2&gt;Looking for an alternative ecosystem&lt;/h2&gt;&lt;p&gt;While MSFT failed to build their own ecosystem, they were quick enough to realise that they need to support the next best option they. That was to create apps and try to build semi-ecosystem with Android devices. They did a decent job in the beginning and that was the only reason I ever switched to Android phone. Discontinuation of Windows Phone was the major reason though. But I didn’t get satisfied with that setup. After a few years I was searching for open-source apps and tried Google ecosystem which was in pre-matured state. I still had the feeling that none of them gave me the experience I wanted. I was a true hater of Apple back then. Because I didn’t feel that they were good enough or they didn’t have a set of features that I wanted. One day I was watching Apple Event where they revealed the upcoming features in their software lineup and all other APIs, SDKs. I must admit that I was pretty impressed. I was equally excited about their universal application just like when I got to know about Universal Windows Platform applications. That is when I felt that this is the new ecosystem that I should try, this is something that MSFT wanted to achieve.&lt;/p&gt;&lt;h2&gt;Entering the Apple Ecosystem&lt;/h2&gt;&lt;p&gt;Not gonna lie, but I was still sceptical about the promises that Apple made about their ecosystem. I was not fortune enough to buy their devices and try everything. My journey started with a MacBook Pro that I got during my intern period. I explored lot of stuff about a lot of things. That is when I decided MBP is definitely a great choice for ambitious developers like me. I was not nerdy enough to go for a Linux one. There is also a reason why I didn’t go that way, because I always wanted something to work “Out of the box”, I don’t want to setup things, they should work with minimal setup. So may that was the reason why I got attracted to Apple.&lt;/p&gt;&lt;h2&gt;Finding the perfect Ecosystem&lt;/h2&gt;&lt;p&gt;After MBP, I used an iPad Pro, which definitely mesmerised me with the continuity features. That is when I made the decision that this ecosystem is what I have been looking for. Then I eventually ended up owning majority of Apple products.&lt;/p&gt;&lt;h2&gt;Major use cases&lt;/h2&gt;&lt;p&gt;Many people ask me why you’re so mad about the “Ecosystem” thing. Does it really matter? Does it really add value? What do you even do with that? So I explain about what I use it for and they are indirectly the answers for all those questions&lt;/p&gt;&lt;ul&gt;&lt;li&gt;Universal apps and syncing data between all devices which is seamless. I can text someone on my watch, phone, tablet and my laptop. Which is a major requirement for me. Also syncing of reminders, notes notifications etc.&lt;/li&gt;&lt;li&gt;Universal Copy, now this feature is available on many platforms but they require setup and which I want to avoid. I want pure seamless integration. I copy on one device and paste on other device, just simple but beautiful.&lt;/li&gt;&lt;li&gt;Handoff and Continuity feature. Let me explain this with a scenario. As part of my job I have to read a lot of documentation and do extensive browsing. Say I opened a bunch of tabs in Safari on my Mac and now I want to take a walk, I just standup and open Safari on my iPhone, voila I have all my tabs from Mac. Not just from Mac but also iPad. So whatever the device is that I’m gonna use for browsing I don’t miss on anything.&lt;ul&gt;&lt;li&gt;Also if an app is Universal, then I use it on one device and take it other device in the same state with just a single tap.&lt;/li&gt;&lt;li&gt;Setting up devices is so simple that you just tap a button and everything else is taken care of. Though the first device will take some time.&lt;/li&gt;&lt;li&gt;When you get a new device, you just turn it on while you’re near your other devices, that’s all you should do to integrate and set it up. It just works out of the box with zero or minimal setup.&lt;/li&gt;&lt;li&gt;Seamless switching and connections of Airpods with all other devices&lt;/li&gt;&lt;li&gt;Using devices in combinations. iPad as external screen for MacBook, Watch to control media and volume, iPhone and iPad as remote for TV, handing off calls from one device to another.&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;Sharing data, passwords, mobile hotspot with other Apple users and devices with just single taps.&lt;/li&gt;&lt;li&gt;Find My to locate all your friends and devices in a single place.&lt;/li&gt;&lt;li&gt;Using Watch to unlock Phone and Mac is the most underrated feature IMO&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;Not just these but there are many other features as well that keep me in this ecosystem. Though many would argue that X feature you mentioned above in in Y ecosystem. My question to them is does all the features I mentioned above exist in any single ecosystem of devices? That is THE reason for me to finally settle for this.&lt;/p&gt;&lt;p&gt;I’m an Apple fanboi today because the above, if someone else does it better then I’ll be their fanboi. I’m a lover of ecosystem and cross platform and cross device applications. In this digital era all that matters to me is seamless connectivity than some sophisticated features. My respect to all those who build such well knitted and well connected products.&lt;/p&gt;</content:encoded></item><item><title><![CDATA[Teachers and Mentors]]></title><description><![CDATA[It’s been a while since I wrote any blog or worked continuously on any side project. But today I feel like writing this and it was always in…]]></description><link>https://krushiraj.github.io/writings/teachers-day/</link><guid isPermaLink="true">https://krushiraj.github.io/writings/teachers-day/</guid><pubDate>Mon, 05 Sep 2022 00:00:00 GMT</pubDate><content:encoded>&lt;p&gt;It’s been a while since I wrote any blog or worked continuously on any side project. But today I feel like writing this and it was always in my mind for the last 2 years. So, I thought of writing this as a first step to re-write my daily routine and to check off an item in my list that are there for a long time.&lt;/p&gt;&lt;p&gt;It is Teacher’s Day today and I always wanted to dedicate a post to all those who directly or indirectly taught me various things in the course of my life. I’m always thankful for what I am today. This particular position that I am in today is somehow because of the impact that various people had on me. Thanks to all my teachers/mentors. There are a lot of things I learned from various people but there are some striking qualities that I imitated/learned/assimilated from a few of them. This writing is a special dedication to all of them and I want to list what I learned from them. I think it would be better if I go in chronological order on how they have an impact on my life and how I changed eventually to become a better person.&lt;/p&gt;&lt;p&gt;Starting with Primary School - I was considered to be a dumb student, at least as per the marks sheet which is the final deciding factor to judge a student in Indian Education System :P. That is when I gradually ended up talking to my first teacher Mr. K. Satyanarayana who brought a drastic change in me by encouraging and pushing me to study better. If you’re interested in something then the fundamentals of that topic are well known to you and you enjoy exploring it, this is what I believe and he was the one who built the basics strong for my math and a reason for my special interest in math and problem-solving.&lt;/p&gt;&lt;p&gt;Next is definitely one of the youngest teachers who taught me, Mr. J. B. Ram. Probably he is just like an elder brother to me in age but he was the one who pushed me further. He always said that if you don’t question something you will never learn about it well and if you think you understood something then you must be in a place to answer anything about it. That was the point where I started to explore things and question stuff I don’t know. This quality is much needed for a person who wants to learn things by himself. I should say that he is the first one to indirectly encourage me to go towards self-learning which is much required for any person in my opinion. I should share an incident that happened, I remember that one day we were taught some concepts in Math and that concept was from the third chapter (assume I don’t exactly remember) and I was trying to solve something that is from the fourth chapter by sitting in the last bench. He saw that I was writing something in the notes while he was teaching. He asked the person beside me about what I was doing, just to make sure I’m not doing anything that is not supposed to be done in that class. The fellow beside me had a glance and complained that I was solving problems that are not yet taught (in a tone that I was doing something wrong). Then Ram sir came to me to have a look at what I was doing, I was a bit frightened as to what he would say. He had a look at my notes and said, “Good, that is how a curious student should be. But never do this in class, do it in your free time or you can even come to me so we can do it together”. He also said to my fellow mate that there is nothing wrong with what I was doing and that his tone of the complaint is not necessary. That was the moment I learned that if you are curious enough then there will always be a person who will guide you.&lt;/p&gt;&lt;p&gt;By the time I was in High School. I had to move back to my hometown and I was already missing both of the previously mentioned teachers. I was in a feeling that I would never get someone who would encourage me like that and who will guide me in the way they used to. But I was lucky enough to find Mr. Satyajeet Rokad who was a great guide for me. He was more of an elder friend than a teacher to me. I was very glad that I could finally find someone who can resonate with me and guide me. Until I met him all my education was to gather information and put it out in the examinations to get good ranks. But it all changed after I met him. There is a popular quote that says, “&lt;strong&gt;Knowing about something is not Knowledge it is just information. Information when understood and interconnected will become Knowledge&lt;/strong&gt;”. He was the one who inculcated that thought in me. Instead of just gathering information he insisted us to build a good knowledge base from that. In most of the schools in the area I lived they only evaluate and give better grades for your answers to questions in exams if they are almost the same as what is written in books. So it all feels like reproducing content with a photographic memory. But Stayajeet was the one who used to discourage people who do that, he always use to encourage people with the answers to questions which are in their own words of their understanding and logically correct no matter the length of the answer. These all led me to become a good self-learner.&lt;/p&gt;&lt;p&gt;After High School and till graduation I didn’t find a teacher from whom I could learn something that changed my life drastically. Then Mission RnD happened, which I should say has changed my life in many ways. I found great teachers, mentors, and ambitious friends over there. I found Peri Sir and KC Sir there. If I had to write what I learned from each of them and what I learned from all the people from Mission RnD then it would become a mini-series of blog posts. In short, I would say that I got better at my skills and better at looking at a problem from a different perspective, though it is a math/coding/real-life problem. KC always made us think beyond what we could already do. He comes up with hard-hitting realities that enlighten you. For example, you can have a couple of views for a problem say, bird’s eye view, straight forward view, blah blah blah but there comes a KC view :D from which you always seem to find the problem very easy and interesting to solve. He reinforced self-learning, conceptual learning, and many other important things with his talks. And to talk about Peri Sir, his teachings are always peculiar (so are KC’s) they are fun and always have an inner meaning which is deeper when you listen to the same class again and again, that could be the reason why we and our seniors rush to his classes in the name of assisting him when he is teaching our juniors. There is definitely a lot to learn from him but I always feel like I wish I could attend more of his classes in person. Ethics, Values, Character, and Discipline are some things that I learned from him (though I’m not completely following discipline now, which I feel bad about). --- Recently one of my friends, Hari said, “Discipline is something we lack in our day-to-day life or at least we should have good discipline in our work life. That is what I learned from Peri sir and Americans during my masters”. I definitely agree with that, we are not completely badly disciplined but we are not at the level of what we wanted to be. I should work on this.&lt;/p&gt;&lt;p&gt;Here comes my transition of learning from Mentors after Teachers. One day KC introduced a nerdy guy in our class who was supposed to teach us the basics of React.js. After the class KC said that the guy’s name is Aravind Balla and he is currently switching to a remote job, also added that he is one of his favorites. That is when I had a hook to that moment and I started learning about what a remote job is and who is this guy that KC spoke about. Eventually, I ended up following Aravind on what he did to end up as a good Engineer working for a remote startup. Luckily fate was so good that I ended up being a colleague to him and a good friend cum mentor. I then came across this &lt;a href=&quot;https://www.instagram.com/p/B3thXqCljSN/&quot;&gt;https://www.instagram.com/p/B3thXqCljSN/&lt;/a&gt; . After this, I started looking for people who can indirectly mentor me and then I found Raghava (full name Sai Raghava Acharya indeed an Acharya) who is a friend of Aravind, another mentor that I would never forget. Also, I found mentors in my childhood friends Sai Peddiwar, Murali, etc., I don’t deny the fact that the absence of these people would have affected my life in a very drastic way. I have learned a lot from each of them and I reciprocate them.&lt;/p&gt;&lt;p&gt;Finally, the most underrated teacher of my life is my mother who is responsible for my self-learning behavior which is a quality that I got from her, and my father who literally taught me the meaning of the famous dialogues ”Viluvale Aasthi” even before that dialogue was out.&lt;/p&gt;&lt;p&gt;I couldn’t mention everyone but the above-mentioned are the ones who brought great changes in me to become a better person. On a final note, all I want to say is that there are a lot of people who influenced me and had an impact on me and that is the reason why I am here today and I am glad for that. I want to end this by saying that we can find a lot of people from which you can learn in enormous amounts, you just have to be curious and keen to find them, that’s it.&lt;/p&gt;</content:encoded></item><item><title><![CDATA[Building 'Mini-Terminal' for my portfolio]]></title><description><![CDATA[This is an article where I share my experience and the decisions I made while building the  Mini-Terminal . How did it all start? I wanted…]]></description><link>https://krushiraj.github.io/writings/mini-terminal-story/</link><guid isPermaLink="true">https://krushiraj.github.io/writings/mini-terminal-story/</guid><pubDate>Mon, 22 Jul 2019 00:00:00 GMT</pubDate><content:encoded>&lt;blockquote&gt;&lt;p&gt;This is an article where I share my experience and the decisions I made while building the &lt;a href=&quot;https://krushiraj.github.io/mini-terminal&quot;&gt;Mini-Terminal&lt;/a&gt;.&lt;/p&gt;&lt;/blockquote&gt;&lt;h2&gt;How did it all start?&lt;/h2&gt;&lt;p&gt;I wanted to build a portfolio site for myself, and to differentiate myself from the other popular portfolios found online, I decided to make something which also would showcase my skills in Data Structures, Algorithms and Front-end frameworks. I had some prior experience working with React but none with Vue. So I resolved to work on Vue for this. My goal was to build a webpage whsich would simulate a terminal and file system in a computer. Also, I didn’t want to use any helper libraries or packages to make the terminal. I handled the key press events myself to create an editor. Only elements that were used in creating this webpage were div, span and p.&lt;/p&gt;&lt;h2&gt;The UI building blocks&lt;/h2&gt;&lt;p&gt;First I decided on what components to build. I realised that I should have a container which would handle the key press events. The other components were ReadOnlyText section and EditableText section. In a CLI based terminal you just have text, which is mostly read-only and few parts are editable. This editable text will be converted to ReadOnly once we hit ‘return/enter’ key to execute the commands we give.&lt;/p&gt;&lt;h2&gt;The internals that give life to UI&lt;/h2&gt;&lt;p&gt;I implemented a tree with node similar to inode to mock the file-system. I wrote a generic parser and executor components which will parse the text and pass the parsed text as token, which contain some meta data to the executor. The executor will identify the command and execute the function that maps to command. In this way we can have any number of commands and functionalities added with ease in future. Everything was built as generic as possible to extend the capabilities and functionalities with ease. Auto complete suggestions feature was implemented based on the meta data that I had in an object. This is where I have mappings to command names, functions, help text and meta related to arguments and options. This helped me to implement the help command and built a Trie for autocompletion feature.&lt;/p&gt;&lt;h2&gt;Summing up&lt;/h2&gt;&lt;p&gt;That was a great experience for me building this because it required me to put in more than one skill to build the entire webpage. My thought to showcase my proficiency in different skills was perfectly potrayed with this webpage because it  required skills like implementation of different and complex data structures, writing algorithms which are efficient and optimal, understanding how Vue components work and communication between the components in the DOM heirarchy, exploring things in JS and CSS.&lt;/p&gt;&lt;p&gt;So, that’s how the Mini Terminal was built and the story behind it.&lt;/p&gt;</content:encoded></item><item><title><![CDATA[My thoughts on cross-platform/device apps]]></title><description><![CDATA[TLDR; In this article, I will share my thoughts on building modern cross-platform and cross-device applications. What made me to think about…]]></description><link>https://krushiraj.github.io/writings/thoughts-on-x-platform-device-apps/</link><guid isPermaLink="true">https://krushiraj.github.io/writings/thoughts-on-x-platform-device-apps/</guid><pubDate>Fri, 28 Jun 2019 00:00:00 GMT</pubDate><content:encoded>&lt;blockquote&gt;&lt;p&gt;TLDR; In this article, I will share my thoughts on building modern cross-platform and cross-device applications.&lt;/p&gt;&lt;/blockquote&gt;&lt;h2&gt;What made me to think about cross-platform and cross-device applications&lt;/h2&gt;&lt;p&gt;In recent times I had few ideas which would help me make things more simplistic every day. Most of those ideas were cross-platform and cross-device applications. I’ll briefly tell about ideas(if you are interested). Few of my ideas were:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;p&gt;A single application for searching and editing memes. A single repository where you can find meme templates based on search keywords, also smart search based on intents.&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;A Universal clipboard(though Apple and Microsoft has it, I wanted it to be true cross-platform). I wanted to build this because I use a lot of devices while working on some projects. I switch between various device types and operating systems while I’m working. I wanted to share the clipboard data from one device to another without being sending it as a message to myself in slack or using a notes app on the cloud.&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h2&gt;Research and learnings&lt;/h2&gt;&lt;p&gt;When I started to think of building applications for these ideas, the first question that hit me was how do I make it pure cross-platform application? I went on in the search of an answer for this, read a lot of blogs, documentations, every possible resource that I could find. I knew about Xamarin, Cordova and few others which are popular for building cross-platform/device applications. After reading lots of articles on the web, I got an answer that is better than any other alternative.&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;My considerations were
Device types: desktops, laptops, tablets, and mobile phones
Operating Systems: Windows, macOS, Linux, Android, iOS&lt;/p&gt;&lt;/blockquote&gt;&lt;h2&gt;My decisions from the learning&lt;/h2&gt;&lt;p&gt;My choice was &lt;code&gt;Electron&lt;/code&gt; for desktop applications and &lt;code&gt;React Native&lt;/code&gt; for mobile applications. You can write beautiful UI for desktop applications using HTML, CSS, and JavaScript, as electron provides the lightweight version of chromium and it renders only that part which used to render web-pages in browser. We can also consume node.js scripts and npm packages to get things done. You can read more about Electron &lt;a href=&quot;https://electronjs.org/&quot;&gt;&lt;code&gt;here&lt;/code&gt;&lt;/a&gt;. React Native, though it is not as old as other similar libraries but it has something cool which made to stick to this, to know more about it visit this &lt;a href=&quot;https://facebook.github.io/react-native/&quot;&gt;&lt;code&gt;link&lt;/code&gt;&lt;/a&gt;. The first thing that made me to stick to React Native is you can write most of the UI using a single JavaScript codebase. The second thing is you can consume the native APIs and build JavaScript UI components from native components exposed by each platform. The question for frontend and basic things can be done using the above. You can read more about React Native Bridge over &lt;a href=&quot;https://facebook.github.io/react-native/docs/0.60/native-modules-setup&quot;&gt;&lt;code&gt;here&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt;&lt;p&gt;What if you’re building something that relies on system calls and low-level interactions. In such a case, you might have a question why Node.js based libraries?&lt;/p&gt;&lt;p&gt;So, during my investigation, I found that most of the cross-platform applications were written in C++ earlier. And that is the language of choice for most of the developers to have interactions with the system at deeper/lower levels of hierarchy. So, what is the significance, why does C++ even come in the middle of this discussion? The answer is JavaScript might not have the capability to interact with system components, but C++ does have and we can have JavaScript wrappers written for any C++ code that is available and consume it natively in Node.js. This even answers our question to handle the underlying things and processes.&lt;/p&gt;&lt;h2&gt;Conclusion&lt;/h2&gt;&lt;p&gt;One thing that I want to conclude is that there is no such library to date where you can write once and ship to different platforms and for different device form factors. But, amongst all the choices and gaining popularity for JavaScript and it’s libraries and the community support above decision were made by me.&lt;/p&gt;</content:encoded></item><item><title><![CDATA[React Native Tips Repo]]></title><description><![CDATA[github/krushiraj/react-native-tips This is a repository where I keep on adding new tips and suggestions to work on  React Native . Few of…]]></description><link>https://krushiraj.github.io/writings/react-native-tips/</link><guid isPermaLink="true">https://krushiraj.github.io/writings/react-native-tips/</guid><pubDate>Tue, 05 Feb 2019 00:00:00 GMT</pubDate><content:encoded>&lt;p&gt;&lt;span class=&quot;gh-card-wrap&quot;&gt;&lt;span class=&quot;github-card&quot; data-user=&quot;krushiraj&quot; data-repo=&quot;react-native-tips&quot;&gt;&lt;span class=&quot;loading&quot;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;This is a repository where I keep on adding new tips and suggestions to work on &lt;a href=&quot;https://facebook.github.io/react-native/&quot;&gt;&lt;code&gt;React Native&lt;/code&gt;&lt;/a&gt;. Few of them were taken from several sources on the web when I was surfing to solve few problems I faced. Few are my personal recommendations and suggestions that I felt would be helpful for everyone.&lt;/p&gt;&lt;p&gt;If you have any suggestions or tips that are not added in the repository yet. Please feel free to raise a PR with all the tips and suggestions from your side. Thank you. 😀&lt;/p&gt;</content:encoded></item><item><title><![CDATA[A bot that saved a lot of time for me.]]></title><description><![CDATA[In 2018, sometime between May and June. I had a remote working internship with  Verzeo Edutech . In the same period, I had to attend the…]]></description><link>https://krushiraj.github.io/writings/quiz-writer-bot-blog/</link><guid isPermaLink="true">https://krushiraj.github.io/writings/quiz-writer-bot-blog/</guid><pubDate>Wed, 23 Jan 2019 00:00:00 GMT</pubDate><content:encoded>&lt;p&gt;In 2018, sometime between May and June. I had a remote working internship with &lt;a href=&quot;https://verzeo.in/&quot;&gt;&lt;em&gt;Verzeo Edutech&lt;/em&gt;&lt;/a&gt;. In the same period, I had to attend the summer course of &lt;a href=&quot;http://missionrnd.com/&quot;&gt;&lt;em&gt;Mission RnD&lt;/em&gt;&lt;/a&gt;. I was able to manage and work on both the things parallelly and everything was fine. But, one day I realized that there were some mandatory quizzes assigned to us and there were only 2 days left before I should finish writing those tests.&lt;/p&gt;&lt;p&gt;&lt;img src=&quot;https://media.giphy.com/media/lJnAXeJO8tE7E37mxq/giphy.gif&quot;/&gt;&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;Lazy minds fetch the solutions faster&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;I started to take the first quiz and felt that almost 80-90% of the questions were of type ‘guess the output for the following code’. So, I immediately called my friend who finished all the quizzes and asked him if my analysis was correct. I immediately got an idea to write a bot to write quizzes on behalf of me. I thought this would work because the passing score is 75% and almost 80-90% questions are ‘guess the output’ types which doesn’t require any human knowledge or interference. I made my mind and started writing a bot for this purpose.&lt;/p&gt;&lt;p&gt;My choice of language for this bot was python. Because, I’m more confident and elegant at writing code in Python and huge availability of helper libraries are easy to read and write syntax. I chose my language and I have to think of how do I read the questions and mark answers for each of the questions in each test. My answer for this was &lt;a href=&quot;https://selenium-python.readthedocs.io/&quot;&gt;&lt;code&gt;Selenium&lt;/code&gt;&lt;/a&gt; automated testing framework for python.&lt;/p&gt;&lt;p&gt;So, what have I done to make the bot working? It’s just as simple as you can think. You can read about it &lt;a href=&quot;/writings/quiz-writer-bot-project&quot;&gt;&lt;code&gt;here&lt;/code&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;That’s how I wrote a bot to write tests for myself. Each question had a tricky code and I had to guess the correct output, which would take at least a minute for each question, in the best case. Every test had 20 questions and there were 12 tests lined up for me in the pending tab. So, in the best case, it would be a 4-hour long task. I took around 30 mins to write the code which will do this for me in a few minutes. That’s how I saved my time by spending it wisely by work smart rather than working hard 😜  .&lt;/p&gt;&lt;p&gt;&lt;img src=&quot;https://media.giphy.com/media/SLBr5yLzocSYw/giphy.gif&quot;/&gt;&lt;/p&gt;&lt;p&gt;This is how I felt myself when others were writing those tests by spending a lot of time and I wrote a bot that writes those tests for me 😎.&lt;/p&gt;</content:encoded></item><item><title><![CDATA[Quiz Writer Bot]]></title><description><![CDATA[I have made this project for my personal use and it helped me in a few situations after I wrote this one. You can read about the  background…]]></description><link>https://krushiraj.github.io/writings/quiz-writer-bot-project/</link><guid isPermaLink="true">https://krushiraj.github.io/writings/quiz-writer-bot-project/</guid><pubDate>Tue, 22 Jan 2019 00:00:00 GMT</pubDate><content:encoded>&lt;p&gt;I have made this project for my personal use and it helped me in a few situations after I wrote this one. You can read about the &lt;a href=&quot;/writings/quiz-writer-bot-blog/&quot;&gt;background story&lt;/a&gt; about why I built this. You can also find the basic version of the script for the bot at:&lt;/p&gt;&lt;p&gt;&lt;span class=&quot;gh-card-wrap&quot;&gt;&lt;span class=&quot;github-card&quot; data-user=&quot;krushiraj&quot; data-repo=&quot;quiz-writer-bot&quot;&gt;&lt;span class=&quot;loading&quot;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;In this post, I’ll briefly explain how I made this bot and what were the problems that I faced and the decisions I made.&lt;/p&gt;&lt;h2&gt;Why this bot&lt;/h2&gt;&lt;p&gt;First and foremost thing that motivated me to write this bot is that almost 80-90% of questions were based on guess the output types. So, I thought I can write a bot which can directly execute the code that is shown and select the answer based on output. If you want to read in detail about why I built this then read &lt;a href=&quot;/writings/quiz-writer-blog&quot;&gt;Quiz writer bot blog&lt;/a&gt;&lt;/p&gt;&lt;h2&gt;Identify the pattern&lt;/h2&gt;&lt;p&gt;To the knowledge that I had at the time I wrote this bot, I know that bots are written based on some common patterns for a given task. The common things or patterns that I found in my particular problem were:&lt;/p&gt;&lt;ol&gt;&lt;li&gt;All questions containing code to guess the output were in C (a single language)&lt;/li&gt;&lt;li&gt;Most of the options contained the exact output that we may get when we compile and run the given code. No complicated options that required human intervention to map to an option based on the output.&lt;/li&gt;&lt;li&gt;The DOM pattern was similar to all questions, they don’t have any dynamic class names or ids. So once we have an XPath or a CSS selector to some element it remains the same all the time.&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;Once I had all the information above I tried to fetch the elements by playing for a while in console in developer tools of the browser. With that, I have all the CSS selectors or XPaths ready for grabbing the elements.&lt;/p&gt;&lt;h2&gt;Implementation&lt;/h2&gt;&lt;p&gt;Now I can access the DOM elements that I want but, what about the interactions? How do my bot clicks on correct options and then clicks on the next question, next test, etc.,? To simulate these I chose &lt;a href=&quot;https://selenium-python.readthedocs.io/&quot;&gt;Selenium&lt;/a&gt;, which is used to automate some tests on webpages. My choice of language was python because of 2 reasons, I am very elegant in Python and most of the bots that I heard of is written in Python. So, here is what I did:&lt;/p&gt;&lt;ol&gt;&lt;li&gt;Initialize the selenium driver and goto the URL where the online test is hosted. Enter my credentials which are fed to bot through selenium.&lt;/li&gt;&lt;li&gt;Select the appropriate test and click on start test.&lt;/li&gt;&lt;li&gt;Repeat the following steps until there are no questions left else go to step 9.&lt;/li&gt;&lt;li&gt;Get the question and find if it contains ‘guess the output’ sub-string.&lt;/li&gt;&lt;li&gt;If no skip to next question else get the code from &lt;code&gt;pre&lt;/code&gt; or &lt;code&gt;code&lt;/code&gt; tag and write it to a file with &lt;code&gt;.c&lt;/code&gt; extension.&lt;/li&gt;&lt;li&gt;Now compile the file and execute it with the &lt;a href=&quot;https://docs.python.org/3.7/library/subprocess.html#subprocess.run&quot;&gt;&lt;code&gt;run&lt;/code&gt;&lt;/a&gt; method exposed in the &lt;a href=&quot;https://docs.python.org/3.7/library/subprocess.html&quot;&gt;&lt;code&gt;subprocess&lt;/code&gt;&lt;/a&gt; module of python and get the output.&lt;/li&gt;&lt;li&gt;Compare the output the options available. Whichever has the exact match select it. If no exact match is found then go for the next closest match. If still nothing matches then go for some random option.&lt;/li&gt;&lt;li&gt;Click on the next question.&lt;/li&gt;&lt;li&gt;Click on the next test if there are any else quit the browser.
I used &lt;a href=&quot;https://docs.python.org/3/library/difflib.html&quot;&gt;&lt;code&gt;difflib&lt;/code&gt;&lt;/a&gt; for finding the closest matches and &lt;a href=&quot;https://docs.python.org/3/library/random.html&quot;&gt;&lt;code&gt;random&lt;/code&gt;&lt;/a&gt; module for random choice making.&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;That’s how I wrote a bot to write online tests for me in my hectic schedule 😜.&lt;/p&gt;</content:encoded></item><item><title><![CDATA[VCE Results Web-app]]></title><description><![CDATA[In 2018 around mid-June, I was working on Django to explore more about it and trying out some new things and features in Django which I…]]></description><link>https://krushiraj.github.io/writings/vce-results-app/</link><guid isPermaLink="true">https://krushiraj.github.io/writings/vce-results-app/</guid><pubDate>Tue, 25 Dec 2018 00:00:00 GMT</pubDate><content:encoded>&lt;p&gt;In 2018 around mid-June, I was working on Django to explore more about it and trying out some new things and features in Django which I never used till that day. So, I decided to build a couple of web apps to get more familiar with it and to master Python. During this, I build a simple web application where I make some REST calls to an API endpoint which will fetch the news around the world and I processed the data received and displayed it. I wanted to build one more application which would be helpful for people around me. That’s when the idea to build VCE Results was born. Our college results site is the most un-reliable site I’ve ever seen. Soon after they release the results it goes down for no reason(even if the user hits are more or none). So, I decided to build this application so that students can rely on this to check their results.&lt;/p&gt;&lt;p&gt;You can find the repo for this project at&lt;/p&gt;&lt;p&gt;&lt;span class=&quot;gh-card-wrap&quot;&gt;&lt;span class=&quot;github-card&quot; data-user=&quot;krushiraj&quot; data-repo=&quot;vce-results&quot;&gt;&lt;span class=&quot;loading&quot;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;The live version of this project is hosted at &lt;a style=&quot;color:indianred&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot; href=&quot;http://vceresults.pythonanywhere.com/&quot;&gt;vceresults.pythonanywhere.com&lt;/a&gt;.&lt;/p&gt;&lt;p&gt;If you face any issues in the live version or found any defects please feel free to raise and issue in the GitHub repository’s &lt;a style=&quot;color:skyblue&quot; href=&quot;https://github.com/krushiraj/vce-results/issues&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;issues&lt;/a&gt; section. Also, all types of contributions are welcomed.&lt;/p&gt;&lt;p&gt;It was the time when our results for the end semester would be released in a day or two. So I decided to build it as soon as possible, because I wanted this web app to go live at the same time the results would be declared.&lt;/p&gt;&lt;h2&gt;Building blocks&lt;/h2&gt;&lt;hr/&gt;&lt;h3&gt;Grab Data&lt;/h3&gt;&lt;p&gt;First thing I had to do was to find a way to fetch the results data from our server. They won’t give me permissions to read the data in the college database from a 3rd party application and they didn’t expose any endpoint to fetch results. So I had to look for other ways, I found scrapping the data from their site is the best possible way that is possible at that time. I wrote a scraper which would grab the HTML code for each of the student’s result page.&lt;/p&gt;&lt;h3&gt;Process Data&lt;/h3&gt;&lt;p&gt;Now that I have the data in the form of HTML source code. I want it to be in a form which can be easily accessible by the Django backend. To solve this I wrote a data importer script that reads the HTML and parses the data required from me and inserts it into the database.&lt;/p&gt;&lt;h3&gt;Giving life to the web app&lt;/h3&gt;&lt;p&gt;The final thing is to show the data to the end user of the web app. I think no explanation is needed. Because it’s the most obvious thing and goal of the project.&lt;/p&gt;&lt;p&gt;I finished building the application before that night and was waiting for our college to release the results.&lt;/p&gt;&lt;h2&gt;The release&lt;/h2&gt;&lt;hr/&gt;&lt;p&gt;As expected the results for that semester were released the next day. I ran the &lt;code&gt;datascrapper&lt;/code&gt; and &lt;code&gt;dataimporter&lt;/code&gt; scripts to fetch the data and had a copy in my app’s database. It took a few minutes, soon after the process was finished I made the application to go live. I got a great response from the fellow mates, seniors and juniors. While few were appreciating my efforts for doing this, few were busy checking out their results and there were some people(to whom I want to thank) who found few minor bugs in UI and some data inconsistency. They reported the issues which was great feedback for me and that helped me to improve the application.&lt;/p&gt;&lt;p&gt;That was a great experience building this application and making it to go live and iterating over the application features and enhancements from the feedback received.&lt;/p&gt;</content:encoded></item></channel></rss>