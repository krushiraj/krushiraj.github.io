<?xml version="1.0" encoding="UTF-8"?><rss xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title><![CDATA[Krushi Raj Tula - RSS Feed]]></title><description><![CDATA[Portfolio of Krushi Raj Tula. A developer, geek, enthusiast, who loves to solve problems and fix things with technology. You can read my writings here.]]></description><link>https://krushiraj.github.io</link><generator>GatsbyJS</generator><lastBuildDate>Tue, 01 Oct 2019 12:08:45 GMT</lastBuildDate><item><title><![CDATA[How I built 'Mini-Terminal' for my portfolio]]></title><description><![CDATA[This is an article where I share my experience and the decisions I made while building the  Mini-Terminal . How did it all start? I wantedâ€¦]]></description><link>https://krushiraj.github.io/writings/mini-terminal-story/</link><guid isPermaLink="true">https://krushiraj.github.io/writings/mini-terminal-story/</guid><pubDate>Mon, 22 Jul 2019 00:00:00 GMT</pubDate><content:encoded>&lt;blockquote&gt;&lt;p&gt;This is an article where I share my experience and the decisions I made while building the &lt;a href=&quot;https://krushiraj.github.io/mini-terminal&quot;&gt;Mini-Terminal&lt;/a&gt;.&lt;/p&gt;&lt;/blockquote&gt;&lt;h2&gt;How did it all start?&lt;/h2&gt;&lt;p&gt;I wanted to build a portfolio site for myself. I started looking at various popular portfolios that I found by searching here and there. I decided on how my portfolio would look like and I also had a finalized design for my portfolio in my head. But, I wanted to make something which would be part of my portfolio and which also would showcase my skills in Data Structures, Algorithms and using Front-end frameworks. Prior to this I worked on some proprietary frontend framework by ServiceNow, which was made by picking best of both worlds from React and Vue. I had some prior experience working with React but I never worked with Vue. So I decided to work on Vue for this. My goal was to build a webpage whsich would mock a terminal and file system in a computer. Also, I didnâ€™t want to use any ready made helper libraries or packages to mock the terminal. So I decide to handle the key press events by myself and mock an editor. Only elements that were used in making this webpage were div, span and p.&lt;/p&gt;&lt;h2&gt;The UI building blocks&lt;/h2&gt;&lt;p&gt;First I decided on what components to build. I realised that I should have a container which would handle the key press events. The other components were ReadOnlyText section and EditableText section. So in a CLI based terminal you just have text, which is mostly read only and few parts are editable. This editable text will be converted to ReadOnly once we hit â€˜return/enterâ€™ key to execute the commands we give. So those were the base components on which the whole page was built.&lt;/p&gt;&lt;h2&gt;The internals that give life to UI&lt;/h2&gt;&lt;p&gt;I have implemented a tree with node similar to inode to mock the file-system. I wrote a generic parser and executor components which will parse the text and pass the parsed text as token, which contain some meta data to the executor. The executor will identify the command and execute the function that maps to command. In this way we can have any number of commands and functionalities added with ease in future. Everything was built as generic as possible to extend the capabilities and functionalities with ease. Auto complete suggestions feature was implemented based on the meta data that I had in an object. This is where I have mappings to command names, functions, help text and meta related to arguments and options. This helped me to implement the help command and built a Trie for autocompletion feature.&lt;/p&gt;&lt;h2&gt;Summing up&lt;/h2&gt;&lt;p&gt;That was a great experience for me building this because it required me to put in more than one skill to build whole webpage. My thought to showcase my proficiency in different skills was perfectly potrayed with this webpage because it  required skills like implementation of different and complex data structures, writing algorithms which are efficient and optimal, understanding how Vue components work and communication between the components in the DOM heirarchy, exploring things in JS and CSS.&lt;/p&gt;&lt;p&gt;So, thatâ€™s how the Mini Terminal was built and the story behind it.&lt;/p&gt;</content:encoded></item><item><title><![CDATA[How I wrote a bot that saved a lot of time for me.]]></title><description><![CDATA[In 2018, sometime between May and June. I had a remote working internship with  Verzeo Edutech . In the same period, I had to attend theâ€¦]]></description><link>https://krushiraj.github.io/writings/quiz-writer-bot-blog/</link><guid isPermaLink="true">https://krushiraj.github.io/writings/quiz-writer-bot-blog/</guid><pubDate>Wed, 23 Jan 2019 00:00:00 GMT</pubDate><content:encoded>&lt;p&gt;In 2018, sometime between May and June. I had a remote working internship with &lt;a href=&quot;https://verzeo.in/&quot;&gt;&lt;em&gt;Verzeo Edutech&lt;/em&gt;&lt;/a&gt;. In the same period, I had to attend the summer course of &lt;a href=&quot;http://missionrnd.com/&quot;&gt;&lt;em&gt;Mission RnD&lt;/em&gt;&lt;/a&gt;. I was able to manage and work on both the things parallelly and everything was fine. But, one day I realized that there were some mandatory quizzes assigned to us and there were only 2 days left before I should finish writing those tests.&lt;/p&gt;&lt;p&gt;&lt;img src=&quot;https://media.giphy.com/media/lJnAXeJO8tE7E37mxq/giphy.gif&quot;/&gt;&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;Lazy minds fetch the solutions faster&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;I started to take the first quiz and felt that almost 80-90% of the questions were of type â€˜guess the output for the following codeâ€™. So, I immediately called my friend who finished all the quizzes and asked him if my analysis was correct. I immediately got an idea to write a bot to write quizzes on behalf of me. I thought this would work because the passing score is 75% and almost 80-90% questions are â€˜guess the outputâ€™ types which doesnâ€™t require any human knowledge or interference. I made my mind and started writing a bot for this purpose.&lt;/p&gt;&lt;p&gt;My choice of language for this bot was python. Because, Iâ€™m more confident and elegant at writing code in Python and huge availability of helper libraries are easy to read and write syntax. I chose my language and I have to think of how do I read the questions and mark answers for each of the questions in each test. My answer for this was &lt;a href=&quot;https://selenium-python.readthedocs.io/&quot;&gt;&lt;code&gt;Selenium&lt;/code&gt;&lt;/a&gt; automated testing framework for python.&lt;/p&gt;&lt;p&gt;So, what have I done to make the bot working? Itâ€™s just as simple as you can think. You can read about it &lt;a href=&quot;/writings/quiz-writer-bot-project&quot;&gt;&lt;code&gt;here&lt;/code&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;Thatâ€™s how I wrote a bot to write tests for myself. Each question had a tricky code and I had to guess the correct output, which would take at least a minute for each question, in the best case. Every test had 20 questions and there were 12 tests lined up for me in the pending tab. So, in the best case, it would be a 4-hour long task. I took around 30 mins to write the code which will do this for me in a few minutes. Thatâ€™s how I saved my time by spending it wisely by work smart rather than working hard ðŸ˜œ  .&lt;/p&gt;&lt;p&gt;&lt;img src=&quot;https://media.giphy.com/media/SLBr5yLzocSYw/giphy.gif&quot;/&gt;&lt;/p&gt;&lt;p&gt;This is how I felt myself when others were writing those tests by spending a lot of time and I wrote a bot that writes those tests for me ðŸ˜Ž.&lt;/p&gt;</content:encoded></item><item><title><![CDATA[Quiz Writer Bot]]></title><description><![CDATA[I have made this project for my personal use and it helped me in a few situations after I wrote this one. You can read about the  backgroundâ€¦]]></description><link>https://krushiraj.github.io/writings/quiz-writer-bot-project/</link><guid isPermaLink="true">https://krushiraj.github.io/writings/quiz-writer-bot-project/</guid><pubDate>Tue, 22 Jan 2019 00:00:00 GMT</pubDate><content:encoded>&lt;p&gt;I have made this project for my personal use and it helped me in a few situations after I wrote this one. You can read about the &lt;a href=&quot;/writings/quiz-writer-blog&quot;&gt;background story&lt;/a&gt; about why I built this. You can also find the basic version of the script for the bot at:&lt;/p&gt;&lt;p&gt;&lt;span class=&quot;gh-card-wrap&quot;&gt;&lt;span class=&quot;github-card&quot; data-user=&quot;krushiraj&quot; data-repo=&quot;quiz-writer-bot&quot;&gt;&lt;span class=&quot;loading&quot;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;In this post, Iâ€™ll briefly explain how I made this bot and what were the problems that I faced and the decisions I made.&lt;/p&gt;&lt;h2&gt;Why this bot&lt;/h2&gt;&lt;p&gt;First and foremost thing that motivated me to write this bot is that almost 80-90% of questions were based on guess the output types. So, I thought I can write a bot which can directly execute the code that is shown and select the answer based on output. If you want to read in detail about why I built this then read &lt;a href=&quot;/writings/quiz-writer-blog&quot;&gt;Quiz writer bot blog&lt;/a&gt;&lt;/p&gt;&lt;h2&gt;Identify the pattern&lt;/h2&gt;&lt;p&gt;To the knowledge that I had at the time I wrote this bot, I know that bots are written based on some common patterns for a given task. The common things or patterns that I found in my particular problem were:&lt;/p&gt;&lt;ol&gt;&lt;li&gt;All questions containing code to guess the output were in C (a single language)&lt;/li&gt;&lt;li&gt;Most of the options contained the exact output that we may get when we compile and run the given code. No complicated options that required human intervention to map to an option based on the output.&lt;/li&gt;&lt;li&gt;The DOM pattern was similar to all questions, they donâ€™t have any dynamic class names or ids. So once we have an XPath or a CSS selector to some element it remains the same all the time.&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;Once I had all the information above I tried to fetch the elements by playing for a while in console in developer tools of the browser. With that, I have all the CSS selectors or XPaths ready for grabbing the elements.&lt;/p&gt;&lt;h2&gt;Implementation&lt;/h2&gt;&lt;p&gt;Now I can access the DOM elements that I want but, what about the interactions? How do my bot clicks on correct options and then clicks on the next question, next test, etc.,? To simulate these I chose &lt;a href=&quot;https://selenium-python.readthedocs.io/&quot;&gt;Selenium&lt;/a&gt;, which is used to automate some tests on webpages. My choice of language was python because of 2 reasons, I am very elegant in Python and most of the bots that I heard of is written in Python. So, here is what I did:&lt;/p&gt;&lt;ol&gt;&lt;li&gt;Initialize the selenium driver and goto the URL where the online test is hosted. Enter my credentials which are fed to bot through selenium.&lt;/li&gt;&lt;li&gt;Select the appropriate test and click on start test.&lt;/li&gt;&lt;li&gt;Repeat the following steps until there are no questions left else go to step 9.&lt;/li&gt;&lt;li&gt;Get the question and find if it contains â€˜guess the outputâ€™ sub-string.&lt;/li&gt;&lt;li&gt;If no skip to next question else get the code from &lt;code&gt;pre&lt;/code&gt; or &lt;code&gt;code&lt;/code&gt; tag and write it to a file with &lt;code&gt;.c&lt;/code&gt; extension.&lt;/li&gt;&lt;li&gt;Now compile the file and execute it with the &lt;a href=&quot;https://docs.python.org/3.7/library/subprocess.html#subprocess.run&quot;&gt;&lt;code&gt;run&lt;/code&gt;&lt;/a&gt; method exposed in the &lt;a href=&quot;https://docs.python.org/3.7/library/subprocess.html&quot;&gt;&lt;code&gt;subprocess&lt;/code&gt;&lt;/a&gt; module of python and get the output.&lt;/li&gt;&lt;li&gt;Compare the output the options available. Whichever has the exact match select it. If no exact match is found then go for the next closest match. If still nothing matches then go for some random option.&lt;/li&gt;&lt;li&gt;Click on the next question.&lt;/li&gt;&lt;li&gt;Click on the next test if there are any else quit the browser.
I used &lt;a href=&quot;https://docs.python.org/3/library/difflib.html&quot;&gt;&lt;code&gt;difflib&lt;/code&gt;&lt;/a&gt; for finding the closest matches and &lt;a href=&quot;https://docs.python.org/3/library/random.html&quot;&gt;&lt;code&gt;random&lt;/code&gt;&lt;/a&gt; module for random choice making.&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;Thatâ€™s how I wrote a bot to write online tests for me in my hectic schedule ðŸ˜œ.&lt;/p&gt;</content:encoded></item></channel></rss>