<?xml version="1.0" encoding="UTF-8"?><rss xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title><![CDATA[Krushi Raj Tula - RSS Feed]]></title><description><![CDATA[Portfolio of Krushi Raj Tula. A developer, geek, enthusiast, who loves to solve problems and fix things with technology. You can read my writings here.]]></description><link>https://krushiraj.github.io</link><generator>GatsbyJS</generator><lastBuildDate>Tue, 01 Oct 2019 03:30:55 GMT</lastBuildDate><item><title><![CDATA[How I built 'Mini-Terminal' for my portfolio]]></title><description><![CDATA[This is an article where I share my experience and the decisions I made while building the  Mini-Terminal . How did it all start? I wanted…]]></description><link>https://krushiraj.github.io/writings/mini-terminal-story/</link><guid isPermaLink="true">https://krushiraj.github.io/writings/mini-terminal-story/</guid><pubDate>Mon, 22 Jul 2019 00:00:00 GMT</pubDate><content:encoded>&lt;blockquote&gt;&lt;p&gt;This is an article where I share my experience and the decisions I made while building the &lt;a href=&quot;https://krushiraj.github.io/mini-terminal&quot;&gt;Mini-Terminal&lt;/a&gt;.&lt;/p&gt;&lt;/blockquote&gt;&lt;h2&gt;How did it all start?&lt;/h2&gt;&lt;p&gt;I wanted to build a portfolio site for myself. I started looking at various popular portfolios that I found by searching here and there. I decided on how my portfolio would look like and I also had a finalized design for my portfolio in my head. But, I wanted to make something which would be part of my portfolio and which also would showcase my skills in Data Structures, Algorithms and using Front-end frameworks. Prior to this I worked on some proprietary frontend framework by ServiceNow, which was made by picking best of both worlds from React and Vue. I had some prior experience working with React but I never worked with Vue. So I decided to work on Vue for this. My goal was to build a webpage whsich would mock a terminal and file system in a computer. Also, I didn’t want to use any ready made helper libraries or packages to mock the terminal. So I decide to handle the key press events by myself and mock an editor. Only elements that were used in making this webpage were div, span and p.&lt;/p&gt;&lt;h2&gt;The UI building blocks&lt;/h2&gt;&lt;p&gt;First I decided on what components to build. I realised that I should have a container which would handle the key press events. The other components were ReadOnlyText section and EditableText section. So in a CLI based terminal you just have text, which is mostly read only and few parts are editable. This editable text will be converted to ReadOnly once we hit ‘return/enter’ key to execute the commands we give. So those were the base components on which the whole page was built.&lt;/p&gt;&lt;h2&gt;The internals that give life to UI&lt;/h2&gt;&lt;p&gt;I have implemented a tree with node similar to inode to mock the file-system. I wrote a generic parser and executor components which will parse the text and pass the parsed text as token, which contain some meta data to the executor. The executor will identify the command and execute the function that maps to command. In this way we can have any number of commands and functionalities added with ease in future. Everything was built as generic as possible to extend the capabilities and functionalities with ease. Auto complete suggestions feature was implemented based on the meta data that I had in an object. This is where I have mappings to command names, functions, help text and meta related to arguments and options. This helped me to implement the help command and built a Trie for autocompletion feature.&lt;/p&gt;&lt;h2&gt;Summing up&lt;/h2&gt;&lt;p&gt;That was a great experience for me building this because it required me to put in more than one skill to build whole webpage. My thought to showcase my proficiency in different skills was perfectly potrayed with this webpage because it  required skills like implementation of different and complex data structures, writing algorithms which are efficient and optimal, understanding how Vue components work and communication between the components in the DOM heirarchy, exploring things in JS and CSS.&lt;/p&gt;&lt;p&gt;So, that’s how the Mini Terminal was built and the story behind it.&lt;/p&gt;</content:encoded></item></channel></rss>