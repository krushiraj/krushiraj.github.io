<?xml version="1.0" encoding="UTF-8"?><rss xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title><![CDATA[Krushi Raj Tula - RSS Feed]]></title><description><![CDATA[Portfolio of Krushi Raj Tula. A developer, geek, enthusiast, who loves to solve problems and fix things with technology. You can read my writings here.]]></description><link>https://krushiraj.github.io</link><generator>GatsbyJS</generator><lastBuildDate>Sat, 17 Oct 2020 19:15:50 GMT</lastBuildDate><item><title><![CDATA[Building 'Mini-Terminal' for my portfolio]]></title><description><![CDATA[This is an article where I share my experience and the decisions I made while building the  Mini-Terminal . How did it all start? I wanted…]]></description><link>https://krushiraj.github.io/writings/mini-terminal-story/</link><guid isPermaLink="true">https://krushiraj.github.io/writings/mini-terminal-story/</guid><pubDate>Mon, 22 Jul 2019 00:00:00 GMT</pubDate><content:encoded>&lt;blockquote&gt;&lt;p&gt;This is an article where I share my experience and the decisions I made while building the &lt;a href=&quot;https://krushiraj.github.io/mini-terminal&quot;&gt;Mini-Terminal&lt;/a&gt;.&lt;/p&gt;&lt;/blockquote&gt;&lt;h2&gt;How did it all start?&lt;/h2&gt;&lt;p&gt;I wanted to build a portfolio site for myself, and to differentiate myself from the other popular portfolios found online, I decided to make something which also would showcase my skills in Data Structures, Algorithms and Front-end frameworks. I had some prior experience working with React but none with Vue. So I resolved to work on Vue for this. My goal was to build a webpage whsich would simulate a terminal and file system in a computer. Also, I didn’t want to use any helper libraries or packages to make the terminal. I handled the key press events myself to create an editor. Only elements that were used in creating this webpage were div, span and p.&lt;/p&gt;&lt;h2&gt;The UI building blocks&lt;/h2&gt;&lt;p&gt;First I decided on what components to build. I realised that I should have a container which would handle the key press events. The other components were ReadOnlyText section and EditableText section. In a CLI based terminal you just have text, which is mostly read-only and few parts are editable. This editable text will be converted to ReadOnly once we hit ‘return/enter’ key to execute the commands we give.&lt;/p&gt;&lt;h2&gt;The internals that give life to UI&lt;/h2&gt;&lt;p&gt;I implemented a tree with node similar to inode to mock the file-system. I wrote a generic parser and executor components which will parse the text and pass the parsed text as token, which contain some meta data to the executor. The executor will identify the command and execute the function that maps to command. In this way we can have any number of commands and functionalities added with ease in future. Everything was built as generic as possible to extend the capabilities and functionalities with ease. Auto complete suggestions feature was implemented based on the meta data that I had in an object. This is where I have mappings to command names, functions, help text and meta related to arguments and options. This helped me to implement the help command and built a Trie for autocompletion feature.&lt;/p&gt;&lt;h2&gt;Summing up&lt;/h2&gt;&lt;p&gt;That was a great experience for me building this because it required me to put in more than one skill to build the entire webpage. My thought to showcase my proficiency in different skills was perfectly potrayed with this webpage because it  required skills like implementation of different and complex data structures, writing algorithms which are efficient and optimal, understanding how Vue components work and communication between the components in the DOM heirarchy, exploring things in JS and CSS.&lt;/p&gt;&lt;p&gt;So, that’s how the Mini Terminal was built and the story behind it.&lt;/p&gt;</content:encoded></item><item><title><![CDATA[My thoughts on cross-platform/device apps]]></title><description><![CDATA[TLDR; In this article, I will share my thoughts on building modern cross-platform and cross-device applications. What made me to think about…]]></description><link>https://krushiraj.github.io/writings/thoughts-on-x-platform-device-apps/</link><guid isPermaLink="true">https://krushiraj.github.io/writings/thoughts-on-x-platform-device-apps/</guid><pubDate>Fri, 28 Jun 2019 00:00:00 GMT</pubDate><content:encoded>&lt;blockquote&gt;&lt;p&gt;TLDR; In this article, I will share my thoughts on building modern cross-platform and cross-device applications.&lt;/p&gt;&lt;/blockquote&gt;&lt;h2&gt;What made me to think about cross-platform and cross-device applications&lt;/h2&gt;&lt;p&gt;In recent times I had few ideas which would help me make things more simplistic every day. Most of those ideas were cross-platform and cross-device applications. I’ll briefly tell about ideas(if you are interested). Few of my ideas were:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;p&gt;A single application for searching and editing memes. A single repository where you can find meme templates based on search keywords, also smart search based on intents.&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;A Universal clipboard(though Apple and Microsoft has it, I wanted it to be true cross-platform). I wanted to build this because I use a lot of devices while working on some projects. I switch between various device types and operating systems while I’m working. I wanted to share the clipboard data from one device to another without being sending it as a message to myself in slack or using a notes app on the cloud.&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h2&gt;Research and learnings&lt;/h2&gt;&lt;p&gt;When I started to think of building applications for these ideas, the first question that hit me was how do I make it pure cross-platform application? I went on in the search of an answer for this, read a lot of blogs, documentations, every possible resource that I could find. I knew about Xamarin, Cordova and few others which are popular for building cross-platform/device applications. After reading lots of articles on the web, I got an answer that is better than any other alternative.&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;My considerations were
Device types: desktops, laptops, tablets, and mobile phones
Operating Systems: Windows, macOS, Linux, Android, iOS&lt;/p&gt;&lt;/blockquote&gt;&lt;h2&gt;My decisions from the learning&lt;/h2&gt;&lt;p&gt;My choice was &lt;code&gt;Electron&lt;/code&gt; for desktop applications and &lt;code&gt;React Native&lt;/code&gt; for mobile applications. You can write beautiful UI for desktop applications using HTML, CSS, and JavaScript, as electron provides the lightweight version of chromium and it renders only that part which used to render web-pages in browser. We can also consume node.js scripts and npm packages to get things done. You can read more about Electron &lt;a href=&quot;https://electronjs.org/&quot;&gt;&lt;code&gt;here&lt;/code&gt;&lt;/a&gt;. React Native, though it is not as old as other similar libraries but it has something cool which made to stick to this, to know more about it visit this &lt;a href=&quot;https://facebook.github.io/react-native/&quot;&gt;&lt;code&gt;link&lt;/code&gt;&lt;/a&gt;. The first thing that made me to stick to React Native is you can write most of the UI using a single JavaScript codebase. The second thing is you can consume the native APIs and build JavaScript UI components from native components exposed by each platform. The question for frontend and basic things can be done using the above. You can read more about React Native Bridge over &lt;a href=&quot;https://facebook.github.io/react-native/docs/0.60/native-modules-setup&quot;&gt;&lt;code&gt;here&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt;&lt;p&gt;What if you’re building something that relies on system calls and low-level interactions. In such a case, you might have a question why Node.js based libraries?&lt;/p&gt;&lt;p&gt;So, during my investigation, I found that most of the cross-platform applications were written in C++ earlier. And that is the language of choice for most of the developers to have interactions with the system at deeper/lower levels of hierarchy. So, what is the significance, why does C++ even come in the middle of this discussion? The answer is JavaScript might not have the capability to interact with system components, but C++ does have and we can have JavaScript wrappers written for any C++ code that is available and consume it natively in Node.js. This even answers our question to handle the underlying things and processes.&lt;/p&gt;&lt;h2&gt;Conclusion&lt;/h2&gt;&lt;p&gt;One thing that I want to conclude is that there is no such library to date where you can write once and ship to different platforms and for different device form factors. But, amongst all the choices and gaining popularity for JavaScript and it’s libraries and the community support above decision were made by me.&lt;/p&gt;</content:encoded></item><item><title><![CDATA[React Native Tips Repo]]></title><description><![CDATA[github/krushiraj/react-native-tips This is a repository where I keep on adding new tips and suggestions to work on  React Native . Few of…]]></description><link>https://krushiraj.github.io/writings/react-native-tips/</link><guid isPermaLink="true">https://krushiraj.github.io/writings/react-native-tips/</guid><pubDate>Tue, 05 Feb 2019 00:00:00 GMT</pubDate><content:encoded>&lt;p&gt;&lt;span class=&quot;gh-card-wrap&quot;&gt;&lt;span class=&quot;github-card&quot; data-user=&quot;krushiraj&quot; data-repo=&quot;react-native-tips&quot;&gt;&lt;span class=&quot;loading&quot;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;This is a repository where I keep on adding new tips and suggestions to work on &lt;a href=&quot;https://facebook.github.io/react-native/&quot;&gt;&lt;code&gt;React Native&lt;/code&gt;&lt;/a&gt;. Few of them were taken from several sources on the web when I was surfing to solve few problems I faced. Few are my personal recommendations and suggestions that I felt would be helpful for everyone.&lt;/p&gt;&lt;p&gt;If you have any suggestions or tips that are not added in the repository yet. Please feel free to raise a PR with all the tips and suggestions from your side. Thank you. 😀&lt;/p&gt;</content:encoded></item><item><title><![CDATA[A bot that saved a lot of time for me.]]></title><description><![CDATA[In 2018, sometime between May and June. I had a remote working internship with  Verzeo Edutech . In the same period, I had to attend the…]]></description><link>https://krushiraj.github.io/writings/quiz-writer-bot-blog/</link><guid isPermaLink="true">https://krushiraj.github.io/writings/quiz-writer-bot-blog/</guid><pubDate>Wed, 23 Jan 2019 00:00:00 GMT</pubDate><content:encoded>&lt;p&gt;In 2018, sometime between May and June. I had a remote working internship with &lt;a href=&quot;https://verzeo.in/&quot;&gt;&lt;em&gt;Verzeo Edutech&lt;/em&gt;&lt;/a&gt;. In the same period, I had to attend the summer course of &lt;a href=&quot;http://missionrnd.com/&quot;&gt;&lt;em&gt;Mission RnD&lt;/em&gt;&lt;/a&gt;. I was able to manage and work on both the things parallelly and everything was fine. But, one day I realized that there were some mandatory quizzes assigned to us and there were only 2 days left before I should finish writing those tests.&lt;/p&gt;&lt;p&gt;&lt;img src=&quot;https://media.giphy.com/media/lJnAXeJO8tE7E37mxq/giphy.gif&quot;/&gt;&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;Lazy minds fetch the solutions faster&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;I started to take the first quiz and felt that almost 80-90% of the questions were of type ‘guess the output for the following code’. So, I immediately called my friend who finished all the quizzes and asked him if my analysis was correct. I immediately got an idea to write a bot to write quizzes on behalf of me. I thought this would work because the passing score is 75% and almost 80-90% questions are ‘guess the output’ types which doesn’t require any human knowledge or interference. I made my mind and started writing a bot for this purpose.&lt;/p&gt;&lt;p&gt;My choice of language for this bot was python. Because, I’m more confident and elegant at writing code in Python and huge availability of helper libraries are easy to read and write syntax. I chose my language and I have to think of how do I read the questions and mark answers for each of the questions in each test. My answer for this was &lt;a href=&quot;https://selenium-python.readthedocs.io/&quot;&gt;&lt;code&gt;Selenium&lt;/code&gt;&lt;/a&gt; automated testing framework for python.&lt;/p&gt;&lt;p&gt;So, what have I done to make the bot working? It’s just as simple as you can think. You can read about it &lt;a href=&quot;/writings/quiz-writer-bot-project&quot;&gt;&lt;code&gt;here&lt;/code&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;That’s how I wrote a bot to write tests for myself. Each question had a tricky code and I had to guess the correct output, which would take at least a minute for each question, in the best case. Every test had 20 questions and there were 12 tests lined up for me in the pending tab. So, in the best case, it would be a 4-hour long task. I took around 30 mins to write the code which will do this for me in a few minutes. That’s how I saved my time by spending it wisely by work smart rather than working hard 😜  .&lt;/p&gt;&lt;p&gt;&lt;img src=&quot;https://media.giphy.com/media/SLBr5yLzocSYw/giphy.gif&quot;/&gt;&lt;/p&gt;&lt;p&gt;This is how I felt myself when others were writing those tests by spending a lot of time and I wrote a bot that writes those tests for me 😎.&lt;/p&gt;</content:encoded></item><item><title><![CDATA[Quiz Writer Bot]]></title><description><![CDATA[I have made this project for my personal use and it helped me in a few situations after I wrote this one. You can read about the  background…]]></description><link>https://krushiraj.github.io/writings/quiz-writer-bot-project/</link><guid isPermaLink="true">https://krushiraj.github.io/writings/quiz-writer-bot-project/</guid><pubDate>Tue, 22 Jan 2019 00:00:00 GMT</pubDate><content:encoded>&lt;p&gt;I have made this project for my personal use and it helped me in a few situations after I wrote this one. You can read about the &lt;a href=&quot;/writings/quiz-writer-bot-blog/&quot;&gt;background story&lt;/a&gt; about why I built this. You can also find the basic version of the script for the bot at:&lt;/p&gt;&lt;p&gt;&lt;span class=&quot;gh-card-wrap&quot;&gt;&lt;span class=&quot;github-card&quot; data-user=&quot;krushiraj&quot; data-repo=&quot;quiz-writer-bot&quot;&gt;&lt;span class=&quot;loading&quot;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;In this post, I’ll briefly explain how I made this bot and what were the problems that I faced and the decisions I made.&lt;/p&gt;&lt;h2&gt;Why this bot&lt;/h2&gt;&lt;p&gt;First and foremost thing that motivated me to write this bot is that almost 80-90% of questions were based on guess the output types. So, I thought I can write a bot which can directly execute the code that is shown and select the answer based on output. If you want to read in detail about why I built this then read &lt;a href=&quot;/writings/quiz-writer-blog&quot;&gt;Quiz writer bot blog&lt;/a&gt;&lt;/p&gt;&lt;h2&gt;Identify the pattern&lt;/h2&gt;&lt;p&gt;To the knowledge that I had at the time I wrote this bot, I know that bots are written based on some common patterns for a given task. The common things or patterns that I found in my particular problem were:&lt;/p&gt;&lt;ol&gt;&lt;li&gt;All questions containing code to guess the output were in C (a single language)&lt;/li&gt;&lt;li&gt;Most of the options contained the exact output that we may get when we compile and run the given code. No complicated options that required human intervention to map to an option based on the output.&lt;/li&gt;&lt;li&gt;The DOM pattern was similar to all questions, they don’t have any dynamic class names or ids. So once we have an XPath or a CSS selector to some element it remains the same all the time.&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;Once I had all the information above I tried to fetch the elements by playing for a while in console in developer tools of the browser. With that, I have all the CSS selectors or XPaths ready for grabbing the elements.&lt;/p&gt;&lt;h2&gt;Implementation&lt;/h2&gt;&lt;p&gt;Now I can access the DOM elements that I want but, what about the interactions? How do my bot clicks on correct options and then clicks on the next question, next test, etc.,? To simulate these I chose &lt;a href=&quot;https://selenium-python.readthedocs.io/&quot;&gt;Selenium&lt;/a&gt;, which is used to automate some tests on webpages. My choice of language was python because of 2 reasons, I am very elegant in Python and most of the bots that I heard of is written in Python. So, here is what I did:&lt;/p&gt;&lt;ol&gt;&lt;li&gt;Initialize the selenium driver and goto the URL where the online test is hosted. Enter my credentials which are fed to bot through selenium.&lt;/li&gt;&lt;li&gt;Select the appropriate test and click on start test.&lt;/li&gt;&lt;li&gt;Repeat the following steps until there are no questions left else go to step 9.&lt;/li&gt;&lt;li&gt;Get the question and find if it contains ‘guess the output’ sub-string.&lt;/li&gt;&lt;li&gt;If no skip to next question else get the code from &lt;code&gt;pre&lt;/code&gt; or &lt;code&gt;code&lt;/code&gt; tag and write it to a file with &lt;code&gt;.c&lt;/code&gt; extension.&lt;/li&gt;&lt;li&gt;Now compile the file and execute it with the &lt;a href=&quot;https://docs.python.org/3.7/library/subprocess.html#subprocess.run&quot;&gt;&lt;code&gt;run&lt;/code&gt;&lt;/a&gt; method exposed in the &lt;a href=&quot;https://docs.python.org/3.7/library/subprocess.html&quot;&gt;&lt;code&gt;subprocess&lt;/code&gt;&lt;/a&gt; module of python and get the output.&lt;/li&gt;&lt;li&gt;Compare the output the options available. Whichever has the exact match select it. If no exact match is found then go for the next closest match. If still nothing matches then go for some random option.&lt;/li&gt;&lt;li&gt;Click on the next question.&lt;/li&gt;&lt;li&gt;Click on the next test if there are any else quit the browser.
I used &lt;a href=&quot;https://docs.python.org/3/library/difflib.html&quot;&gt;&lt;code&gt;difflib&lt;/code&gt;&lt;/a&gt; for finding the closest matches and &lt;a href=&quot;https://docs.python.org/3/library/random.html&quot;&gt;&lt;code&gt;random&lt;/code&gt;&lt;/a&gt; module for random choice making.&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;That’s how I wrote a bot to write online tests for me in my hectic schedule 😜.&lt;/p&gt;</content:encoded></item><item><title><![CDATA[VCE Results Web-app]]></title><description><![CDATA[In 2018 around mid-June, I was working on Django to explore more about it and trying out some new things and features in Django which I…]]></description><link>https://krushiraj.github.io/writings/vce-results-app/</link><guid isPermaLink="true">https://krushiraj.github.io/writings/vce-results-app/</guid><pubDate>Tue, 25 Dec 2018 00:00:00 GMT</pubDate><content:encoded>&lt;p&gt;In 2018 around mid-June, I was working on Django to explore more about it and trying out some new things and features in Django which I never used till that day. So, I decided to build a couple of web apps to get more familiar with it and to master Python. During this, I build a simple web application where I make some REST calls to an API endpoint which will fetch the news around the world and I processed the data received and displayed it. I wanted to build one more application which would be helpful for people around me. That’s when the idea to build VCE Results was born. Our college results site is the most un-reliable site I’ve ever seen. Soon after they release the results it goes down for no reason(even if the user hits are more or none). So, I decided to build this application so that students can rely on this to check their results.&lt;/p&gt;&lt;p&gt;You can find the repo for this project at&lt;/p&gt;&lt;p&gt;&lt;span class=&quot;gh-card-wrap&quot;&gt;&lt;span class=&quot;github-card&quot; data-user=&quot;krushiraj&quot; data-repo=&quot;vce-results&quot;&gt;&lt;span class=&quot;loading&quot;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;The live version of this project is hosted at &lt;a style=&quot;color:indianred&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot; href=&quot;http://vceresults.pythonanywhere.com/&quot;&gt;vceresults.pythonanywhere.com&lt;/a&gt;.&lt;/p&gt;&lt;p&gt;If you face any issues in the live version or found any defects please feel free to raise and issue in the GitHub repository’s &lt;a style=&quot;color:skyblue&quot; href=&quot;https://github.com/krushiraj/vce-results/issues&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;issues&lt;/a&gt; section. Also, all types of contributions are welcomed.&lt;/p&gt;&lt;p&gt;It was the time when our results for the end semester would be released in a day or two. So I decided to build it as soon as possible, because I wanted this web app to go live at the same time the results would be declared.&lt;/p&gt;&lt;h2&gt;Building blocks&lt;/h2&gt;&lt;hr/&gt;&lt;h3&gt;Grab Data&lt;/h3&gt;&lt;p&gt;First thing I had to do was to find a way to fetch the results data from our server. They won’t give me permissions to read the data in the college database from a 3rd party application and they didn’t expose any endpoint to fetch results. So I had to look for other ways, I found scrapping the data from their site is the best possible way that is possible at that time. I wrote a scraper which would grab the HTML code for each of the student’s result page.&lt;/p&gt;&lt;h3&gt;Process Data&lt;/h3&gt;&lt;p&gt;Now that I have the data in the form of HTML source code. I want it to be in a form which can be easily accessible by the Django backend. To solve this I wrote a data importer script that reads the HTML and parses the data required from me and inserts it into the database.&lt;/p&gt;&lt;h3&gt;Giving life to the web app&lt;/h3&gt;&lt;p&gt;The final thing is to show the data to the end user of the web app. I think no explanation is needed. Because it’s the most obvious thing and goal of the project.&lt;/p&gt;&lt;p&gt;I finished building the application before that night and was waiting for our college to release the results.&lt;/p&gt;&lt;h2&gt;The release&lt;/h2&gt;&lt;hr/&gt;&lt;p&gt;As expected the results for that semester were released the next day. I ran the &lt;code&gt;datascrapper&lt;/code&gt; and &lt;code&gt;dataimporter&lt;/code&gt; scripts to fetch the data and had a copy in my app’s database. It took a few minutes, soon after the process was finished I made the application to go live. I got a great response from the fellow mates, seniors and juniors. While few were appreciating my efforts for doing this, few were busy checking out their results and there were some people(to whom I want to thank) who found few minor bugs in UI and some data inconsistency. They reported the issues which was great feedback for me and that helped me to improve the application.&lt;/p&gt;&lt;p&gt;That was a great experience building this application and making it to go live and iterating over the application features and enhancements from the feedback received.&lt;/p&gt;</content:encoded></item></channel></rss>