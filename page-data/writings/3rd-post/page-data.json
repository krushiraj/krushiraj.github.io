{"componentChunkName":"component---src-templates-blog-post-template-js","path":"/writings/3rd-post/","webpackCompilationHash":"","result":{"data":{"mdx":null},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/writings/3rd-post/","previous":{"parent":{"name":"index","sourceInstanceName":"content"},"fields":{"slug":"/writings/first-post/"},"frontmatter":{"title":"My First Post","published":true,"type":"article"},"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"My First Post\",\n  \"date\": \"2019-04-21\",\n  \"type\": \"article\",\n  \"published\": true,\n  \"description\": \"There Krushi is the fetch API in Node, which allows us to make a HTTP request and get some information from the servers. We can use that to make REST calls, get HTML content of a webpage and many more things.\",\n  \"tags\": \"node,javascript,fetch,async await\",\n  \"banner\": \"./krushi.jpg\",\n  \"technologies\": \"javascript,react,gatsby\"\n};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"There is the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"fetch\"), \" API in Node, which allows us to make a HTTP request and get some information from the servers. We can use that to make REST calls, get HTML content of a webpage(if we are using node for scraping) and many more things.\"), mdx(\"blockquote\", null, mdx(\"p\", {\n    parentName: \"blockquote\"\n  }, \"This article is valid for any function that returns a promise.\")), mdx(\"p\", null, \"An example of such call goes like this\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"fetch(\\\"/url\\\")\\n  .then(res => res.json())\\n  .then(data => console.log(data))\\n\")), mdx(\"h2\", null, \"The Async way\"), mdx(\"p\", null, \"We could do the same thing, using async and await.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"const result = await fetch(\\\"/url\\\")\\nconst data = await result.json()\\n\\nconsole.log(data)\\n\\n// Or, a one-liner\\n// const data = await (await fetch('/url')).json(); \\uD83D\\uDE09\\n\")), mdx(\"h2\", null, \"I have so many things to fetch!\"), mdx(\"p\", null, \"Okay fine. We can do that over a classic for loop. The synchronous nature will be preserved. I mean, we can fetch one after the other, synchronously.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"const urls = [...];\\nfor(const url of urls) {\\n    const result = await fetch(url);\\n    const data = await result.json();\\n\\n    console.log(data);\\n}\\n\")), mdx(\"p\", null, \"But what if, the order does not matter? We can fetch them all at once. Yes, all at once, using the Promise API. After all, \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"fetch\"), \" returns a promise and that\\u2019s why we \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"await\"), \" for it to be resolved.\"), mdx(\"p\", null, \"Promise API has this method \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Promise.all()\"), \" , which can be awaited on for all the promises that it accepts as an argument to be resolved.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"const urls = [...];\\nconst promises = urls.map(url => fetch(url));\\n\\nawait Promise.all(promises);\\n\\nfor (const promise of promises) {\\n    const data = await promise.json();\\n    console.log(data);\\n}\\n\")), mdx(\"p\", null, \"This will save us a lot of time. Imagine we want to parse many webpages, around 100, and each webpage takes 2 seconds to be fetched and scraped for information we need. If we fetch it one after the other, it will take us around 200 seconds, which is over 3 minutes. But if we fetch all at once, it will take under a minute.\"), mdx(\"h1\", null, \"Like, really SO MANY!\"), mdx(\"p\", null, \"What is we have over 10000 urls to fetch. If we do the same thing as above, we will most probably not make it. We will have to face some weird socket hangup error. What can we do about it?\"), mdx(\"p\", null, \"There is a node package called \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Bluebird\"), \" which has its own Promise API and it functions the same. It has this method called \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"map\"), \", which takes an extra options argument where we can set concurrency.\"), mdx(\"p\", null, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Promise.map(urls => fetch(url), { concurrency: 100 });\")), mdx(\"p\", null, \"This will, as we can infer from the line, concurrently fetch 100 requests at a time. This will save a significant load on CPU.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"const Promise = require('bluebird').Promise;\\nconst urls = [...];\\nconst promises = await Promise.map(\\n    urls => fetch(url),\\n    { concurrency: 100 }\\n);\\n\\nfor (const promise of promises) {\\n    const data = await promise.json();\\n    console.log(data);\\n}\\n\")), mdx(\"p\", null, \"Thanks for making it till the end.\"), mdx(\"p\", null, \"Keep on Hacking! \\u270C\"), mdx(\"p\", null, mdx(\"blockquote\", _extends({\n    parentName: \"p\"\n  }, {\n    \"className\": \"twitter-tweet\",\n    \"data-dnt\": \"true\"\n  }), mdx(\"p\", _extends({\n    parentName: \"blockquote\"\n  }, {\n    \"lang\": \"en\",\n    \"dir\": \"ltr\"\n  }), \"Tesla\\u2019s mission is to accelerate the world\\u2019s transition to sustainable energy. \", mdx(\"br\", {\n    parentName: \"p\"\n  }), mdx(\"br\", {\n    parentName: \"p\"\n  }), \"\\uD83C\\uDF1E\\u26A1\\uD83D\\uDE97\\uD83D\\uDD0B \", mdx(\"br\", {\n    parentName: \"p\"\n  }), mdx(\"br\", {\n    parentName: \"p\"\n  }), \"(a thread)\"), \"\\u2014 Tesla (@Tesla) \", mdx(\"a\", _extends({\n    parentName: \"blockquote\"\n  }, {\n    \"href\": \"https://twitter.com/Tesla/status/1126575043281080323\"\n  }), \"May 9, 2019\"))));\n}\n;\nMDXContent.isMDXComponent = true;"},"next":null}}}