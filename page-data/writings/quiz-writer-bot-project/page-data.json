{"componentChunkName":"component---src-templates-blog-post-template-js","path":"/writings/quiz-writer-bot-project/","result":{"data":{"mdx":{"id":"b5e9f8ad-2dc3-5774-8c97-fc565f2921da","parent":{"sourceInstanceName":"content"},"excerpt":"I have made this project for my personal use and it helped me in a few situations after I wrote this one. You can read about the  backgroundâ€¦","body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"Quiz Writer Bot\",\n  \"date\": \"2019-01-22\",\n  \"type\": \"project\",\n  \"published\": true,\n  \"keywords\": \"quiz,quiz-writer,bot,python,selenium\",\n  \"description\": \"A mini-project to build a bot for myself to write MCQ based tests for me.\",\n  \"tags\": \"python,selenium,beautiful soup,bot\",\n  \"banner\": \"./bot.png\",\n  \"bannercaption\": \"Image from Google Images\",\n  \"source\": \"https://github.com/krushiraj/quiz-writer-bot\",\n  \"technologies\": \"python,selenium\"\n};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"I have made this project for my personal use and it helped me in a few situations after I wrote this one. You can read about the \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"/writings/quiz-writer-bot-blog/\"\n  }), \"background story\"), \" about why I built this. You can also find the basic version of the script for the bot at:\"), mdx(\"p\", null, mdx(\"span\", _extends({\n    parentName: \"p\"\n  }, {\n    \"className\": \"gh-card-wrap\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"github-card\",\n    \"data-user\": \"krushiraj\",\n    \"data-repo\": \"quiz-writer-bot\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"loading\"\n  }))))), mdx(\"p\", null, \"In this post, I\\u2019ll briefly explain how I made this bot and what were the problems that I faced and the decisions I made.\"), mdx(\"h2\", null, \"Why this bot\"), mdx(\"p\", null, \"First and foremost thing that motivated me to write this bot is that almost 80-90% of questions were based on guess the output types. So, I thought I can write a bot which can directly execute the code that is shown and select the answer based on output. If you want to read in detail about why I built this then read \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"/writings/quiz-writer-blog\"\n  }), \"Quiz writer bot blog\")), mdx(\"h2\", null, \"Identify the pattern\"), mdx(\"p\", null, \"To the knowledge that I had at the time I wrote this bot, I know that bots are written based on some common patterns for a given task. The common things or patterns that I found in my particular problem were:\"), mdx(\"ol\", null, mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"All questions containing code to guess the output were in C (a single language)\"), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"Most of the options contained the exact output that we may get when we compile and run the given code. No complicated options that required human intervention to map to an option based on the output.\"), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"The DOM pattern was similar to all questions, they don\\u2019t have any dynamic class names or ids. So once we have an XPath or a CSS selector to some element it remains the same all the time.\")), mdx(\"p\", null, \"Once I had all the information above I tried to fetch the elements by playing for a while in console in developer tools of the browser. With that, I have all the CSS selectors or XPaths ready for grabbing the elements.\"), mdx(\"h2\", null, \"Implementation\"), mdx(\"p\", null, \"Now I can access the DOM elements that I want but, what about the interactions? How do my bot clicks on correct options and then clicks on the next question, next test, etc.,? To simulate these I chose \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://selenium-python.readthedocs.io/\"\n  }), \"Selenium\"), \", which is used to automate some tests on webpages. My choice of language was python because of 2 reasons, I am very elegant in Python and most of the bots that I heard of is written in Python. So, here is what I did:\"), mdx(\"ol\", null, mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"Initialize the selenium driver and goto the URL where the online test is hosted. Enter my credentials which are fed to bot through selenium.\"), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"Select the appropriate test and click on start test.\"), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"Repeat the following steps until there are no questions left else go to step 9.\"), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"Get the question and find if it contains \\u2018guess the output\\u2019 sub-string.\"), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"If no skip to next question else get the code from \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"pre\"), \" or \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"code\"), \" tag and write it to a file with \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \".c\"), \" extension.\"), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"Now compile the file and execute it with the \", mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"https://docs.python.org/3.7/library/subprocess.html#subprocess.run\"\n  }), mdx(\"inlineCode\", {\n    parentName: \"a\"\n  }, \"run\")), \" method exposed in the \", mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"https://docs.python.org/3.7/library/subprocess.html\"\n  }), mdx(\"inlineCode\", {\n    parentName: \"a\"\n  }, \"subprocess\")), \" module of python and get the output.\"), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"Compare the output the options available. Whichever has the exact match select it. If no exact match is found then go for the next closest match. If still nothing matches then go for some random option.\"), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"Click on the next question.\"), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"Click on the next test if there are any else quit the browser.\\nI used \", mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"https://docs.python.org/3/library/difflib.html\"\n  }), mdx(\"inlineCode\", {\n    parentName: \"a\"\n  }, \"difflib\")), \" for finding the closest matches and \", mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"https://docs.python.org/3/library/random.html\"\n  }), mdx(\"inlineCode\", {\n    parentName: \"a\"\n  }, \"random\")), \" module for random choice making.\")), mdx(\"p\", null, \"That\\u2019s how I wrote a bot to write online tests for me in my hectic schedule \\uD83D\\uDE1C.\"));\n}\n;\nMDXContent.isMDXComponent = true;","frontmatter":{"title":"Quiz Writer Bot","date":"January 22, 2019","description":"A mini-project to build a bot for myself to write MCQ based tests for me.","technologies":"python,selenium","tags":"python,selenium,beautiful soup,bot","keywords":"quiz,quiz-writer,bot,python,selenium","banner":{"childImageSharp":{"fluid":{"tracedSVG":"data:image/svg+xml,%3csvg%20xmlns='http://www.w3.org/2000/svg'%20width='400'%20height='225'%3e%3cpath%20d='M194%2060c-3%204-3%209%201%2012%202%202%202%203%202%2010v9h-11c-18%201-23%205-24%2020v8h-4c-6%201-7%203-7%2011%201%207%202%209%207%209h4v6c0%2011%203%2016%2012%2020%206%203%2046%203%2053%200%208-4%2011-9%2011-20v-6h4c5%200%206-2%207-9%200-8-1-10-7-11h-3l-1-8c-1-15-6-19-23-20h-11l-1-9c0-7%200-8%202-10%206-5%202-14-5-14l-6%202'%20fill='%23d3d3d3'%20fill-rule='evenodd'/%3e%3c/svg%3e","aspectRatio":1.7777777777777777,"src":"/static/cfe09b21b2892af54dbeebe68d536155/78d2a/bot.png","srcSet":"/static/cfe09b21b2892af54dbeebe68d536155/59d48/bot.png 150w,\n/static/cfe09b21b2892af54dbeebe68d536155/c6a2b/bot.png 300w,\n/static/cfe09b21b2892af54dbeebe68d536155/78d2a/bot.png 600w,\n/static/cfe09b21b2892af54dbeebe68d536155/273c9/bot.png 900w,\n/static/cfe09b21b2892af54dbeebe68d536155/9911c/bot.png 1200w,\n/static/cfe09b21b2892af54dbeebe68d536155/4014a/bot.png 3200w","srcWebp":"/static/cfe09b21b2892af54dbeebe68d536155/ad85c/bot.webp","srcSetWebp":"/static/cfe09b21b2892af54dbeebe68d536155/e7487/bot.webp 150w,\n/static/cfe09b21b2892af54dbeebe68d536155/403a4/bot.webp 300w,\n/static/cfe09b21b2892af54dbeebe68d536155/ad85c/bot.webp 600w,\n/static/cfe09b21b2892af54dbeebe68d536155/210c1/bot.webp 900w,\n/static/cfe09b21b2892af54dbeebe68d536155/99238/bot.webp 1200w,\n/static/cfe09b21b2892af54dbeebe68d536155/f9eef/bot.webp 3200w","sizes":"(max-width: 600px) 100vw, 600px"}}},"bannercaption":"Image from Google Images"},"fields":{"slug":"/writings/quiz-writer-bot-project/","socialImage":{"childImageSharp":{"original":{"width":2400,"height":1254,"src":"/static/616becbcf2f1703dfabfdaee6c02635a-a88902e49f8471b5759050110d7c8462.png"}}}}}},"pageContext":{"slug":"/writings/quiz-writer-bot-project/","previous":{"parent":{"name":"index","sourceInstanceName":"content"},"fields":{"slug":"/writings/react-native-tips/"},"frontmatter":{"title":"React Native Tips Repo","published":true,"type":"project"},"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"React Native Tips Repo\",\n  \"date\": \"2019-02-05\",\n  \"type\": \"project\",\n  \"published\": true,\n  \"keywords\": \"react,react-native,tips,suggestions,repo\",\n  \"description\": \"A repository where I keep adding tips for React Native.\",\n  \"tags\": \"react-native,tips\",\n  \"banner\": \"./react-native.png\",\n  \"bannercaption\": \"Image from Google Images\",\n  \"source\": \"https://github.com/krushiraj/react-native-tips\",\n  \"technologies\": \"react-native\"\n};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, mdx(\"span\", _extends({\n    parentName: \"p\"\n  }, {\n    \"className\": \"gh-card-wrap\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"github-card\",\n    \"data-user\": \"krushiraj\",\n    \"data-repo\": \"react-native-tips\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"loading\"\n  }))))), mdx(\"p\", null, \"This is a repository where I keep on adding new tips and suggestions to work on \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://facebook.github.io/react-native/\"\n  }), mdx(\"inlineCode\", {\n    parentName: \"a\"\n  }, \"React Native\")), \". Few of them were taken from several sources on the web when I was surfing to solve few problems I faced. Few are my personal recommendations and suggestions that I felt would be helpful for everyone.\"), mdx(\"p\", null, \"If you have any suggestions or tips that are not added in the repository yet. Please feel free to raise a PR with all the tips and suggestions from your side. Thank you. \\uD83D\\uDE00\"));\n}\n;\nMDXContent.isMDXComponent = true;"},"next":{"parent":{"name":"index","sourceInstanceName":"content"},"fields":{"slug":"/writings/vce-results-app/"},"frontmatter":{"title":"VCE Results Web-app","published":true,"type":"project"},"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"VCE Results Web-app\",\n  \"date\": \"2018-12-25\",\n  \"type\": \"project\",\n  \"published\": true,\n  \"keywords\": \"django,python,scrapping,beautifulsoup,web,automation,selenium,krushi,krushi raj,vasavi,vce,vasavi college of engineering,results,exam\",\n  \"description\": \"A web application which can be used as an alternative source to VCE Results site.\",\n  \"tags\": \"webapp,django,python,vceresults,scrapping,data,import\",\n  \"banner\": \"./vceresults.png\",\n  \"bannercaption\": \"Image from VCE Results web-app\",\n  \"source\": \"https://github.com/krushiraj/vce-results\",\n  \"technologies\": \"python,django,jinja\"\n};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"In 2018 around mid-June, I was working on Django to explore more about it and trying out some new things and features in Django which I never used till that day. So, I decided to build a couple of web apps to get more familiar with it and to master Python. During this, I build a simple web application where I make some REST calls to an API endpoint which will fetch the news around the world and I processed the data received and displayed it. I wanted to build one more application which would be helpful for people around me. That\\u2019s when the idea to build VCE Results was born. Our college results site is the most un-reliable site I\\u2019ve ever seen. Soon after they release the results it goes down for no reason(even if the user hits are more or none). So, I decided to build this application so that students can rely on this to check their results.\"), mdx(\"p\", null, \"You can find the repo for this project at\"), mdx(\"p\", null, mdx(\"span\", _extends({\n    parentName: \"p\"\n  }, {\n    \"className\": \"gh-card-wrap\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"github-card\",\n    \"data-user\": \"krushiraj\",\n    \"data-repo\": \"vce-results\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"loading\"\n  }))))), mdx(\"p\", null, \"The live version of this project is hosted at \", mdx(\"a\", {\n    style: {\n      \"color\": \"indianred\"\n    },\n    target: \"_blank\",\n    rel: \"noopener noreferrer\",\n    href: \"http://vceresults.pythonanywhere.com/\"\n  }, \"vceresults.pythonanywhere.com\"), \".\"), mdx(\"p\", null, \"If you face any issues in the live version or found any defects please feel free to raise and issue in the GitHub repository\\u2019s \", mdx(\"a\", {\n    style: {\n      \"color\": \"skyblue\"\n    },\n    href: \"https://github.com/krushiraj/vce-results/issues\",\n    target: \"_blank\",\n    rel: \"noopener noreferrer\"\n  }, \"issues\"), \" section. Also, all types of contributions are welcomed.\"), mdx(\"p\", null, \"It was the time when our results for the end semester would be released in a day or two. So I decided to build it as soon as possible, because I wanted this web app to go live at the same time the results would be declared.\"), mdx(\"h2\", null, \"Building blocks\"), mdx(\"hr\", null), mdx(\"h3\", null, \"Grab Data\"), mdx(\"p\", null, \"First thing I had to do was to find a way to fetch the results data from our server. They won\\u2019t give me permissions to read the data in the college database from a 3rd party application and they didn\\u2019t expose any endpoint to fetch results. So I had to look for other ways, I found scrapping the data from their site is the best possible way that is possible at that time. I wrote a scraper which would grab the HTML code for each of the student\\u2019s result page.\"), mdx(\"h3\", null, \"Process Data\"), mdx(\"p\", null, \"Now that I have the data in the form of HTML source code. I want it to be in a form which can be easily accessible by the Django backend. To solve this I wrote a data importer script that reads the HTML and parses the data required from me and inserts it into the database.\"), mdx(\"h3\", null, \"Giving life to the web app\"), mdx(\"p\", null, \"The final thing is to show the data to the end user of the web app. I think no explanation is needed. Because it\\u2019s the most obvious thing and goal of the project.\"), mdx(\"p\", null, \"I finished building the application before that night and was waiting for our college to release the results.\"), mdx(\"h2\", null, \"The release\"), mdx(\"hr\", null), mdx(\"p\", null, \"As expected the results for that semester were released the next day. I ran the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"datascrapper\"), \" and \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"dataimporter\"), \" scripts to fetch the data and had a copy in my app\\u2019s database. It took a few minutes, soon after the process was finished I made the application to go live. I got a great response from the fellow mates, seniors and juniors. While few were appreciating my efforts for doing this, few were busy checking out their results and there were some people(to whom I want to thank) who found few minor bugs in UI and some data inconsistency. They reported the issues which was great feedback for me and that helped me to improve the application.\"), mdx(\"p\", null, \"That was a great experience building this application and making it to go live and iterating over the application features and enhancements from the feedback received.\"));\n}\n;\nMDXContent.isMDXComponent = true;"}}}}