{"componentChunkName":"component---src-templates-blog-post-template-js","path":"/writings/mini-terminal-story/","webpackCompilationHash":"1c40ded4ee95013a63e0","result":{"data":{"mdx":{"id":"d9fe0536-58a7-5fb9-a92b-9877cc6505fa","parent":{"__typename":"File","sourceInstanceName":"content"},"excerpt":"This is an article where I share my experience and the decisions I made while building the  Mini-Terminal . How did it all start? I wantedâ€¦","body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"Building 'Mini-Terminal' for my portfolio\",\n  \"date\": \"2019-07-22\",\n  \"type\": \"article\",\n  \"published\": true,\n  \"keywords\": \"terminal,mini-terminal,vue,story,development,datastructure,tree,filesystem,node,trie,auto-complete\",\n  \"description\": \"The motivation and story behind why and how I built 'Mini-Terminal'\",\n  \"tags\": \"javascript,vue,portfolio,data structures\",\n  \"banner\": \"./terminal.png\",\n  \"technologies\": \"javascript,vue\"\n};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"blockquote\", null, mdx(\"p\", {\n    parentName: \"blockquote\"\n  }, \"This is an article where I share my experience and the decisions I made while building the \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://krushiraj.github.io/mini-terminal\"\n  }), \"Mini-Terminal\"), \".\")), mdx(\"h2\", null, \"How did it all start?\"), mdx(\"p\", null, \"I wanted to build a portfolio site for myself. I started looking at various popular portfolios that I found by searching here and there. I decided on how my portfolio would look like and I also had a finalized design for my portfolio in my head. But, I wanted to make something which would be part of my portfolio and which also would showcase my skills in Data Structures, Algorithms and using Front-end frameworks. Prior to this I worked on some proprietary frontend framework by ServiceNow, which was made by picking best of both worlds from React and Vue. I had some prior experience working with React but I never worked with Vue. So I decided to work on Vue for this. My goal was to build a webpage whsich would mock a terminal and file system in a computer. Also, I didn\\u2019t want to use any ready made helper libraries or packages to mock the terminal. So I decide to handle the key press events by myself and mock an editor. Only elements that were used in making this webpage were div, span and p.\"), mdx(\"h2\", null, \"The UI building blocks\"), mdx(\"p\", null, \"First I decided on what components to build. I realised that I should have a container which would handle the key press events. The other components were ReadOnlyText section and EditableText section. So in a CLI based terminal you just have text, which is mostly read only and few parts are editable. This editable text will be converted to ReadOnly once we hit \\u2018return/enter\\u2019 key to execute the commands we give. So those were the base components on which the whole page was built.\"), mdx(\"h2\", null, \"The internals that give life to UI\"), mdx(\"p\", null, \"I have implemented a tree with node similar to inode to mock the file-system. I wrote a generic parser and executor components which will parse the text and pass the parsed text as token, which contain some meta data to the executor. The executor will identify the command and execute the function that maps to command. In this way we can have any number of commands and functionalities added with ease in future. Everything was built as generic as possible to extend the capabilities and functionalities with ease. Auto complete suggestions feature was implemented based on the meta data that I had in an object. This is where I have mappings to command names, functions, help text and meta related to arguments and options. This helped me to implement the help command and built a Trie for autocompletion feature.\"), mdx(\"h2\", null, \"Summing up\"), mdx(\"p\", null, \"That was a great experience for me building this because it required me to put in more than one skill to build whole webpage. My thought to showcase my proficiency in different skills was perfectly potrayed with this webpage because it  required skills like implementation of different and complex data structures, writing algorithms which are efficient and optimal, understanding how Vue components work and communication between the components in the DOM heirarchy, exploring things in JS and CSS.\"), mdx(\"p\", null, \"So, that\\u2019s how the Mini Terminal was built and the story behind it.\"));\n}\n;\nMDXContent.isMDXComponent = true;","frontmatter":{"title":"Building 'Mini-Terminal' for my portfolio","date":"July 22, 2019","description":"The motivation and story behind why and how I built 'Mini-Terminal'","technologies":"javascript,vue","tags":"javascript,vue,portfolio,data structures","keywords":"terminal,mini-terminal,vue,story,development,datastructure,tree,filesystem,node,trie,auto-complete","banner":{"childImageSharp":{"fluid":{"tracedSVG":"data:image/svg+xml,%3csvg%20xmlns='http://www.w3.org/2000/svg'%20width='400'%20height='164'%3e%3cpath%20d='M0%2082v82h401V0H0v82m0%201'%20fill='%23d3d3d3'%20fill-rule='evenodd'/%3e%3c/svg%3e","aspectRatio":2.445859872611465,"src":"/static/816b5f5028134ddc65c34db8cc496de9/59139/terminal.png","srcSet":"/static/816b5f5028134ddc65c34db8cc496de9/d3809/terminal.png 150w,\n/static/816b5f5028134ddc65c34db8cc496de9/fdbb0/terminal.png 300w,\n/static/816b5f5028134ddc65c34db8cc496de9/59139/terminal.png 600w,\n/static/816b5f5028134ddc65c34db8cc496de9/cb30f/terminal.png 900w,\n/static/816b5f5028134ddc65c34db8cc496de9/ba299/terminal.png 1200w,\n/static/816b5f5028134ddc65c34db8cc496de9/ec873/terminal.png 1920w","srcWebp":"/static/816b5f5028134ddc65c34db8cc496de9/6fae7/terminal.webp","srcSetWebp":"/static/816b5f5028134ddc65c34db8cc496de9/87efd/terminal.webp 150w,\n/static/816b5f5028134ddc65c34db8cc496de9/9ea76/terminal.webp 300w,\n/static/816b5f5028134ddc65c34db8cc496de9/6fae7/terminal.webp 600w,\n/static/816b5f5028134ddc65c34db8cc496de9/f39d8/terminal.webp 900w,\n/static/816b5f5028134ddc65c34db8cc496de9/b6424/terminal.webp 1200w,\n/static/816b5f5028134ddc65c34db8cc496de9/cb272/terminal.webp 1920w","sizes":"(max-width: 600px) 100vw, 600px"}}},"bannercaption":null},"fields":{"slug":"/writings/mini-terminal-story/","socialImage":{"childImageSharp":{"original":{"width":2400,"height":1254,"src":"/static/9d372142c33bbd4e093be142849de995-de3669cc97515fac0334589a68c321c8.png"}}}}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/writings/mini-terminal-story/","previous":null,"next":{"parent":{"name":"index","sourceInstanceName":"content"},"fields":{"slug":"/writings/thoughts-on-x-platform-device-apps/"},"frontmatter":{"title":"My thoughts on cross-platform/device apps","published":true,"type":"article"},"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"My thoughts on cross-platform/device apps\",\n  \"date\": \"2019-06-28\",\n  \"type\": \"article\",\n  \"published\": true,\n  \"keywords\": \"cross,cross-platform,cross-device,app,application,electron,node,javascript,nodejs,electron,react-native,NAPI,react-native-bridge\",\n  \"description\": \"There Krushi is the fetch API in Node, which allows us to make a HTTP request and get some information from the servers. We can use that to make REST calls, get HTML content of a webpage and many more things.\",\n  \"tags\": \"javascript,nodejs,electron,react-native,NAPI,react-native-bridge\",\n  \"banner\": \"./crossdp.jpg\",\n  \"bannercaption\": \"Image from Google Images\",\n  \"technologies\": \"python,selenium\"\n};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"blockquote\", null, mdx(\"p\", {\n    parentName: \"blockquote\"\n  }, \"TLDR; In this article, I will share my thoughts on building modern cross-platform and cross-device applications.\")), mdx(\"h2\", null, \"What made me to think about cross-platform and cross-device applications\"), mdx(\"p\", null, \"In recent times I had few ideas which would help me make things more simplistic every day. Most of those ideas were cross-platform and cross-device applications. I\\u2019ll briefly tell about ideas(if you are interested). Few of my ideas were:\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"A single application for searching and editing memes. A single repository where you can find meme templates based on search keywords, also smart search based on intents.\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"A Universal clipboard(though Apple and Microsoft has it, I wanted it to be true cross-platform). I wanted to build this because I use a lot of devices while working on some projects. I switch between various device types and operating systems while I\\u2019m working. I wanted to share the clipboard data from one device to another without being sending it as a message to myself in slack or using a notes app on the cloud.\"))), mdx(\"h2\", null, \"Research and learnings\"), mdx(\"p\", null, \"When I started to think of building applications for these ideas, the first question that hit me was how do I make it pure cross-platform application? I went on in the search of an answer for this, read a lot of blogs, documentations, every possible resource that I could find. I knew about Xamarin, Cordova and few others which are popular for building cross-platform/device applications. After reading lots of articles on the web, I got an answer that is better than any other alternative.\"), mdx(\"blockquote\", null, mdx(\"p\", {\n    parentName: \"blockquote\"\n  }, \"My considerations were\\nDevice types: desktops, laptops, tablets, and mobile phones\\nOperating Systems: Windows, macOS, Linux, Android, iOS\")), mdx(\"h2\", null, \"My decisions from the learning\"), mdx(\"p\", null, \"My choice was \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Electron\"), \" for desktop applications and \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"React Native\"), \" for mobile applications. You can write beautiful UI for desktop applications using HTML, CSS, and JavaScript, as electron provides the lightweight version of chromium and it renders only that part which used to render web-pages in browser. We can also consume node.js scripts and npm packages to get things done. You can read more about Electron \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://electronjs.org/\"\n  }), mdx(\"inlineCode\", {\n    parentName: \"a\"\n  }, \"here\")), \". React Native, though it is not as old as other similar libraries but it has something cool which made to stick to this, to know more about it visit this \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://facebook.github.io/react-native/\"\n  }), mdx(\"inlineCode\", {\n    parentName: \"a\"\n  }, \"link\")), \". The first thing that made me to stick to React Native is you can write most of the UI using a single JavaScript codebase. The second thing is you can consume the native APIs and build JavaScript UI components from native components exposed by each platform. The question for frontend and basic things can be done using the above. You can read more about React Native Bridge over \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://facebook.github.io/react-native/docs/0.60/native-modules-setup\"\n  }), mdx(\"inlineCode\", {\n    parentName: \"a\"\n  }, \"here\")), \".\"), mdx(\"p\", null, \"What if you\\u2019re building something that relies on system calls and low-level interactions. In such a case, you might have a question why Node.js based libraries?\"), mdx(\"p\", null, \"So, during my investigation, I found that most of the cross-platform applications were written in C++ earlier. And that is the language of choice for most of the developers to have interactions with the system at deeper/lower levels of hierarchy. So, what is the significance, why does C++ even come in the middle of this discussion? The answer is JavaScript might not have the capability to interact with system components, but C++ does have and we can have JavaScript wrappers written for any C++ code that is available and consume it natively in Node.js. This even answers our question to handle the underlying things and processes.\"), mdx(\"h2\", null, \"Conclusion\"), mdx(\"p\", null, \"One thing that I want to conclude is that there is no such library to date where you can write once and ship to different platforms and for different device form factors. But, amongst all the choices and gaining popularity for JavaScript and it\\u2019s libraries and the community support above decision were made by me.\"));\n}\n;\nMDXContent.isMDXComponent = true;"}}}}