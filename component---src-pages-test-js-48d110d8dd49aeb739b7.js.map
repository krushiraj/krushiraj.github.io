{"version":3,"sources":["webpack:///./src/pages/test.js","webpack:///./.cache/gatsby-browser-entry.js","webpack:///./.cache/public-page-renderer.js","webpack:///./src/components/SEO/SchemaOrg.js","webpack:///./src/components/SEO/index.js","webpack:///./.cache/public-page-renderer-prod.js","webpack:///./src/utils/helpers.js"],"names":["IndexPage","render","React","Component","loader","enqueue","StaticQueryContext","createContext","StaticQueryDataRenderer","staticQueryData","data","query","finalData","Fragment","StaticQuery","props","children","Consumer","m","module","exports","require","default","memo","author","siteUrl","datePublished","defaultTitle","description","image","isBlogPost","organization","title","url","baseSchema","name","alternateName","schema","itemListElement","position","item","headline","publisher","logo","mainEntityOfPage","type","JSON","stringify","SEO","postData","frontmatter","postImage","seo","site","siteMetadata","postMeta","childMarkdownRemark","normalizeUrl","slug","Date","date","toISOString","htmlAttributes","lang","content","property","social","twitter","SchemaOrg","defaultProps","ProdPageRenderer","location","pageResources","createElement","InternalPageRenderer","json","replace","match"],"mappings":"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","file":"component---src-pages-test-js-48d110d8dd49aeb739b7.js","sourcesContent":["import React from \"react\"\r\nimport SEO from \"../components/SEO\"\r\n// import ListItems from \"../components/ListItems\"\r\n// import CircularImage from \"../components/CircularImage\"\r\n\r\n// const items = [\r\n//   { name: \"about-me\" },\r\n//   { name: \"my-works\" },\r\n//   { name: \"experience\" },\r\n//   { name: \"writings\" },\r\n//   { name: \"skills\" },\r\n//   { name: \"contact\" },\r\n//   { name: \"resume\" },\r\n// ]\r\n\r\nexport default class IndexPage extends React.Component {\r\n  render() {\r\n    return (\r\n      <>\r\n        <SEO />\r\n        {/* <div>\r\n          <div id=\"nav\">\r\n            <a href=\"/\">\r\n              <CircularImage size=\"30\" />\r\n            </a>\r\n            <div id=\"#nav\">\r\n              <ListItems items={items} top={true} />\r\n            </div>\r\n          </div>\r\n        </div> */}\r\n      </>\r\n    )\r\n  }\r\n}\r\n","import React from \"react\"\nimport PropTypes from \"prop-types\"\nimport Link, {\n  withPrefix,\n  withAssetPrefix,\n  navigate,\n  push,\n  replace,\n  navigateTo,\n  parsePath,\n} from \"gatsby-link\"\nimport PageRenderer from \"./public-page-renderer\"\nimport loader from \"./loader\"\n\nconst prefetchPathname = loader.enqueue\n\nconst StaticQueryContext = React.createContext({})\n\nfunction StaticQueryDataRenderer({ staticQueryData, data, query, render }) {\n  const finalData = data\n    ? data.data\n    : staticQueryData[query] && staticQueryData[query].data\n\n  return (\n    <React.Fragment>\n      {finalData && render(finalData)}\n      {!finalData && <div>Loading (StaticQuery)</div>}\n    </React.Fragment>\n  )\n}\n\nconst StaticQuery = props => {\n  const { data, query, render, children } = props\n\n  return (\n    <StaticQueryContext.Consumer>\n      {staticQueryData => (\n        <StaticQueryDataRenderer\n          data={data}\n          query={query}\n          render={render || children}\n          staticQueryData={staticQueryData}\n        />\n      )}\n    </StaticQueryContext.Consumer>\n  )\n}\n\nconst useStaticQuery = query => {\n  if (\n    typeof React.useContext !== `function` &&\n    process.env.NODE_ENV === `development`\n  ) {\n    throw new Error(\n      `You're likely using a version of React that doesn't support Hooks\\n` +\n        `Please update React and ReactDOM to 16.8.0 or later to use the useStaticQuery hook.`\n    )\n  }\n  const context = React.useContext(StaticQueryContext)\n  if (context[query] && context[query].data) {\n    return context[query].data\n  } else {\n    throw new Error(\n      `The result of this StaticQuery could not be fetched.\\n\\n` +\n        `This is likely a bug in Gatsby and if refreshing the page does not fix it, ` +\n        `please open an issue in https://github.com/gatsbyjs/gatsby/issues`\n    )\n  }\n}\n\nStaticQuery.propTypes = {\n  data: PropTypes.object,\n  query: PropTypes.string.isRequired,\n  render: PropTypes.func,\n  children: PropTypes.func,\n}\n\nfunction graphql() {\n  throw new Error(\n    `It appears like Gatsby is misconfigured. Gatsby related \\`graphql\\` calls ` +\n      `are supposed to only be evaluated at compile time, and then compiled away. ` +\n      `Unfortunately, something went wrong and the query was left in the compiled code.\\n\\n` +\n      `Unless your site has a complex or custom babel/Gatsby configuration this is likely a bug in Gatsby.`\n  )\n}\n\nexport {\n  Link,\n  withAssetPrefix,\n  withPrefix,\n  graphql,\n  parsePath,\n  navigate,\n  push, // TODO replace for v3\n  replace, // TODO remove replace for v3\n  navigateTo, // TODO: remove navigateTo for v3\n  StaticQueryContext,\n  StaticQuery,\n  PageRenderer,\n  useStaticQuery,\n  prefetchPathname,\n}\n","const preferDefault = m => (m && m.default) || m\n\nif (process.env.BUILD_STAGE === `develop`) {\n  module.exports = preferDefault(require(`./public-page-renderer-dev`))\n} else if (process.env.BUILD_STAGE === `build-javascript`) {\n  module.exports = preferDefault(require(`./public-page-renderer-prod`))\n} else {\n  module.exports = () => null\n}\n","import React from \"react\"\r\nimport Helmet from \"react-helmet\"\r\n\r\nexport default React.memo(\r\n  ({\r\n    author,\r\n    siteUrl,\r\n    datePublished,\r\n    defaultTitle,\r\n    description,\r\n    image,\r\n    isBlogPost,\r\n    organization,\r\n    title,\r\n    url,\r\n  }) => {\r\n    const baseSchema = [\r\n      {\r\n        \"@context\": \"http://schema.org\",\r\n        \"@type\": \"WebSite\",\r\n        url,\r\n        name: title,\r\n        alternateName: defaultTitle,\r\n        description: \"Portfolio of Krushi Raj Tula\",\r\n      },\r\n    ]\r\n\r\n    const schema = isBlogPost\r\n      ? [\r\n          ...baseSchema,\r\n          {\r\n            \"@context\": \"http://schema.org\",\r\n            \"@type\": \"BreadcrumbList\",\r\n            itemListElement: [\r\n              {\r\n                \"@type\": \"ListItem\",\r\n                position: 1,\r\n                item: {\r\n                  \"@id\": url,\r\n                  name: title,\r\n                  image,\r\n                },\r\n              },\r\n            ],\r\n          },\r\n          {\r\n            \"@context\": \"http://schema.org\",\r\n            \"@type\": \"BlogPosting\",\r\n            url,\r\n            name: title,\r\n            alternateName: defaultTitle,\r\n            headline: title,\r\n            image: {\r\n              \"@type\": \"ImageObject\",\r\n              url: image,\r\n            },\r\n            description,\r\n            author: {\r\n              \"@type\": \"Person\",\r\n              name: author,\r\n            },\r\n            publisher: {\r\n              \"@type\": \"Organization\",\r\n              url: organization.url,\r\n              logo: organization.logo,\r\n              name: organization.name,\r\n            },\r\n            mainEntityOfPage: {\r\n              \"@type\": \"WebSite\",\r\n              \"@id\": siteUrl,\r\n            },\r\n            datePublished,\r\n          },\r\n        ]\r\n      : baseSchema\r\n\r\n    return (\r\n      <Helmet>\r\n        {/* Schema.org tags */}\r\n        <script type=\"application/ld+json\">{JSON.stringify(schema)}</script>\r\n      </Helmet>\r\n    )\r\n  }\r\n)\r\n","import React from \"react\"\r\nimport Helmet from \"react-helmet\"\r\nimport { StaticQuery, graphql } from \"gatsby\"\r\nimport PropTypes from \"prop-types\"\r\nimport SchemaOrg from \"./SchemaOrg\"\r\n\r\nimport { normalizeUrl } from \"../../utils/helpers\"\r\n\r\nconst SEO = ({ postData, frontmatter = {}, postImage, isBlogPost }) => (\r\n  <StaticQuery\r\n    query={graphql`\r\n      {\r\n        site {\r\n          siteMetadata {\r\n            title\r\n            description\r\n            siteUrl\r\n            image\r\n            author\r\n            organization {\r\n              name\r\n              url\r\n              logo\r\n            }\r\n            social {\r\n              twitter\r\n            }\r\n          }\r\n        }\r\n      }\r\n    `}\r\n    render={({ site: { siteMetadata: seo } }) => {\r\n      const postMeta =\r\n        frontmatter || postData.childMarkdownRemark.frontmatter || {}\r\n\r\n      const title = postMeta.title || seo.title\r\n      const description = postMeta.description || seo.description\r\n      const image = postImage\r\n        ? normalizeUrl(`${seo.siteUrl}${postImage}`)\r\n        : null\r\n      const url = postMeta.slug\r\n        ? normalizeUrl(`${seo.siteUrl}${postMeta.slug}`)\r\n        : seo.siteUrl\r\n      const datePublished = isBlogPost\r\n        ? new Date(postMeta.date).toISOString()\r\n        : false\r\n\r\n      return (\r\n        <React.Fragment>\r\n          <Helmet htmlAttributes={{ lang: \"en\" }}>\r\n            {/* General tags */}\r\n            <title>{isBlogPost ? `${title} | ${seo.title}` : title}</title>\r\n            <meta name=\"description\" content={description} />\r\n            {image && <meta name=\"image\" content={image} />}\r\n\r\n            {/* OpenGraph tags */}\r\n            <meta property=\"og:url\" content={url} />\r\n            {isBlogPost ? <meta property=\"og:type\" content=\"article\" /> : null}\r\n            <meta property=\"og:title\" content={title} />\r\n            <meta property=\"og:description\" content={description} />\r\n            {image && <meta property=\"og:image\" content={image} />}\r\n\r\n            {/* Twitter Card tags */}\r\n            <meta name=\"twitter:card\" content=\"summary_large_image\" />\r\n            <meta name=\"twitter:site\" content={\"@\" + seo.social.twitter} />\r\n            <meta name=\"twitter:creator\" content={\"@\" + seo.social.twitter} />\r\n            <meta name=\"twitter:title\" content={title} />\r\n            <meta name=\"twitter:description\" content={description} />\r\n            {image && <meta name=\"twitter:image\" content={image} />}\r\n          </Helmet>\r\n          <SchemaOrg\r\n            isBlogPost={isBlogPost}\r\n            url={url}\r\n            title={title}\r\n            image={image}\r\n            description={description}\r\n            datePublished={datePublished}\r\n            siteUrl={seo.siteUrl}\r\n            author={seo.author}\r\n            organization={seo.organization}\r\n            defaultTitle={seo.title}\r\n          />\r\n        </React.Fragment>\r\n      )\r\n    }}\r\n  />\r\n)\r\n\r\nSEO.propTypes = {\r\n  isBlogPost: PropTypes.bool,\r\n  postData: PropTypes.shape({\r\n    childMarkdownRemark: PropTypes.shape({\r\n      frontmatter: PropTypes.any,\r\n      excerpt: PropTypes.any,\r\n    }),\r\n  }),\r\n  postImage: PropTypes.string,\r\n}\r\n\r\nSEO.defaultProps = {\r\n  isBlogPost: false,\r\n  postData: { childMarkdownRemark: {} },\r\n  postImage: null,\r\n}\r\n\r\nexport default SEO\r\n","import React from \"react\"\nimport PropTypes from \"prop-types\"\n\nimport InternalPageRenderer from \"./page-renderer\"\n\nconst ProdPageRenderer = ({ location, pageResources }) => {\n  if (!pageResources) {\n    return null\n  }\n  return React.createElement(InternalPageRenderer, {\n    location,\n    pageResources,\n    ...pageResources.json,\n  })\n}\n\nProdPageRenderer.propTypes = {\n  location: PropTypes.shape({\n    pathname: PropTypes.string.isRequired,\n  }).isRequired,\n}\n\nexport default ProdPageRenderer\n","exports.normalizeUrl = url => {\r\n  // Remove duplicate slashes\r\n  url = url.replace(/\\/{2,}/g, \"/\")\r\n\r\n  if (!url.match(/^https?:\\/\\//)) {\r\n    url = url.replace(/^(https?:\\/)(.+)/, \"$1/$2\")\r\n  }\r\n  return url\r\n}\r\n"],"sourceRoot":""}